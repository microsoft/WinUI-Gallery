name: $(BuildDefinitionName)_$(date:yyMM).$(date:dd)$(rev:rrr)

# https://aka.ms/obpipelines/triggers
trigger: none 

parameters: # parameters are shown up in ADO UI in a build queue time
- name: 'debug'
  displayName: 'Enable debug output'
  type: boolean
  default: false

variables:
  CDP_DEFINITION_BUILD_COUNT: $[counter('', 0)] # needed for onebranch.pipeline.version task https://aka.ms/obpipelines/versioning
  system.debug: ${{ parameters.debug }}
  ENABLE_PRS_DELAYSIGN: 1
  ROOT: $(Build.SourcesDirectory)
  REPOROOT: $(Build.SourcesDirectory)
  OUTPUTROOT: $(REPOROOT)\out
  NUGET_XMLDOC_MODE: none

  # Docker image which is used to build the project https://aka.ms/obpipelines/containers
  WindowsContainerImage: 'onebranch.azurecr.io/windows/ltsc2019/vse2022:latest' 

  Codeql.Enabled: true #  CodeQL once every 3 days on the default branch for all languages its applicable to in that pipeline.
  
resources:
  repositories: 
    - repository: templates
      type: git
      name: OneBranch.Pipelines/GovernedTemplates
      ref: refs/heads/main

extends:
  template: v2/OneBranch.Official.CrossPlat.yml@templates # https://aka.ms/obpipelines/templates
  parameters:
    platform:
      name: 'windows_undocked'
    
    globalSdl: # Refer the wiki for more options in this parameter: https://aka.ms/obpipelines/sdl
      tsa:
        enabled: false # onebranch publish all sdl results to TSA. If TSA is disabled all SDL tools will forced into 'break' build mode.
      # suppression:
      #   suppressionFile: $(Build.SourcesDirectory)\.gdn\global.gdnsuppress
    featureFlags: 
      ensureArtifactsDirExists: true

    stages:
    - stage: build
      jobs:
      - job: main
        pool:
          # read more about custom job pool types at https://aka.ms/obpipelines/yaml/jobs
          pool:
          type: windows
          isCustom: true
          name: Azure Pipelines
          vmImage: 'windows-latest'
        
        variables:
          ob_outputDirectory: $(build.artifactStagingDirectory)
          ob_artifactSuffix: _$(buildPlatform)_$(buildConfiguration)

          solutionGallery: "**/WinUIGallery.sln"
          solutionUITests: "**/UITests.sln"
          buildPlatform: "x64"
          buildConfiguration: "Debug"
          appxPackageDir: '$(Build.ArtifactStagingDirectory)\AppxPackages\\'

        steps:
        # Package Restore
        - task: NuGetToolInstaller@1
          displayName: Install NuGet 5.8.0
          inputs:
              versionSpec: 5.8.0

        - task: NuGetCommand@2
          displayName: Restore NuGet Packages for WinUI Gallery
          inputs:
            command: 'restore'
            restoreSolution: '**/*.sln'
            feedsToUse: 'config'
            nugetConfigPath: '$(System.DefaultWorkingDirectory)\nuget.config'
        
        - task: UseDotNet@2
          continueOnError: true
          inputs:
            packageType: 'sdk'
            performMultiLevelLookup: true

        # Signing
        - task: PowerShell@2
          displayName: Generate Test Signing Certificate
          inputs:
            targetType: filePath
            filePath: build/GenerateTestPFX.ps1

        # Build (Product)
        - task: DotNetCoreCLI@2
          displayName: Build WinUI Gallery Package
          inputs:
            command: 'publish'
            publishWebProjects: false
            projects: '$(solutionGallery)'
            arguments: '/p:AppxPackageDir="$(appxPackageDir)" /p:platform="$(buildPlatform)" /p:configuration="$(buildConfiguration)" /p:PublishProfile="./WinUIGallery/Properties/PublishProfiles/win-$(buildPlatform).pubxml"'
            zipAfterPublish: false
            modifyOutputPath: false

        - script: |
            dir /b /s $(Build.ArtifactStagingDirectory)
            dir /b /s $(System.DefaultWorkingDirectory)
          displayName: 'List contents of ArtifactStagingDirectory and DefaultWorkingDirectory'

        # Install and Run Unit Tests
        - task: VSTest@2
          displayName: 'Run Sample Unit Tests'
          inputs:
            testSelector: "testAssemblies"
            searchFolder: "$(System.DefaultWorkingDirectory)"
            failOnMinTestsNotRun: true
            minimumExpectedTests: '3'
            testAssemblyVer2: |
              **\WinUIGalleryUnitTests.build.appxrecipe

      # Build and Run UI Tests
        - task: PowerShell@2
          displayName: Install WinUI Gallery Package
          inputs:
              targetType: "inline"
              script: |
                  cd $(appxPackageDir)

                  $AppBundle = Get-ChildItem -Filter WinUIGallery*Test -Name
                  cd $AppBundle

                  .\Install.ps1 -Certificate WinUIGallery.Desktop.cer -Force
              errorActionPreference: "continue"
              failOnStderr: true
              workingDirectory: "$(System.DefaultWorkingDirectory)"
            
        - task: NuGetCommand@2
          displayName: Restore Packages for UI Tests Project
          inputs:
              restoreSolution: "$(solutionUITests)"

        - task: VSBuild@1
          displayName: Build UI Tests Project
          inputs:
              platform: "$(buildPlatform)"
              solution: "$(solutionUITests)"
              configuration: "$(buildConfiguration)"
        - task: Windows Application Driver@0
          displayName: Start Windows Application Driver
          inputs:
              OperationType: "Start"
              AgentResolution: "1080p"
              WADArguments: "4724"

        - task: VSTest@2
          displayName: Run UI Tests
          inputs:
              testSelector: "testAssemblies"
              testAssemblyVer2: |
                  **\UITests.dll
                  !**\*TestAdapter.dll
                  !**\obj\**
                  !**\ref\**
              platform: '$(buildPlatform)'
              configuration: "$(buildConfiguration)"
              searchFolder: "$(System.DefaultWorkingDirectory)"

        - task: Windows Application Driver@0
          displayName: Stop Windows Application Driver
          inputs:
              OperationType: "Stop"

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: $(ob_outputDirectory)
            artifact: 'drop_build_main_$(buildPlatform)_$(buildConfiguration)'
            publishLocation: 'pipeline'

            