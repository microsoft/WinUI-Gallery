<?xml version="1.0" encoding="utf-8"?>
<Page
    x:Class="WinUIGallery.ControlPages.AppWindowPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:controls="using:WinUIGallery.Controls"
    mc:Ignorable="d">

    <StackPanel>
        <controls:ControlExample HeaderText="Creating and customizing an AppWindow from a Window instance">
            <controls:ControlExample.Example>

                <StackPanel>
                    <Button Margin="0,8,0,0"
                            Click="ShowSampleWindow1">Show sample window</Button>
                </StackPanel>
            </controls:ControlExample.Example>

            <controls:ControlExample.Options>
                <StackPanel Spacing="8">
                    <TextBlock Text="Window title" FontWeight="SemiBold"/>
                    <TextBox x:Name="WindowTitle" HorizontalAlignment="Stretch" Text="This is a title" PlaceholderText="Enter window title"/>

                    <TextBlock Text="Window size" FontWeight="SemiBold"/>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <NumberBox Header="Width"
                                   x:Name="WindowWidth"
                                   Grid.Column="0"
                                   LargeChange="100"
                                   Maximum="1000"
                                   Minimum="200"
                                   SmallChange="10"
                                   SpinButtonPlacementMode="Inline"
                                   Value="800"
                                   Margin="0 0 8 0" />
                        <NumberBox Header="Height"
                                   x:Name="WindowHeight"
                                   Grid.Column="1"
                                   LargeChange="100"
                                   Maximum="700"
                                   Minimum="200"
                                   SmallChange="10"
                                   SpinButtonPlacementMode="Inline"
                                   Value="500" />
                    </Grid>
                    
                    <TextBlock Text="Window postion" FontWeight="SemiBold"/>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <NumberBox Header="X"
                                   x:Name="XPoint"
                                   Grid.Column="0"
                                   LargeChange="100"
                                   Maximum="800"
                                   Minimum="0"
                                   SmallChange="10"
                                   SpinButtonPlacementMode="Inline"
                                   Value="50"
                                   Margin="0 0 8 0" />
                        <NumberBox Header="Y"
                                   x:Name="YPoint"
                                   Grid.Column="1"
                                   LargeChange="100"
                                   Maximum="300"
                                   Minimum="0"
                                   SmallChange="10"
                                   SpinButtonPlacementMode="Inline"
                                   Value="50" />
                    </Grid>
                </StackPanel>
            </controls:ControlExample.Options>

            <controls:ControlExample.Xaml>
                <x:String xml:space="preserve">
&lt;Window ...&gt;
    &lt;StackPanel HorizontalAlignment="Center" VerticalAlignment="Center" Spacing="8">
        &lt;Button x:Name="Show" Content="Show" Click="Show_Click" Width="150" />
        &lt;Button x:Name="Hide" Content="Hide" Click="Hide_Click" Width="150" />
        
        &lt;Button x:Name="Close" Content="Close" Click="Close_Click" Width="150" Margin="0,16,0,0" />
    &lt;/StackPanel>
&lt;/Window>
                </x:String>
            </controls:ControlExample.Xaml>
            
            <controls:ControlExample.CSharp>
                <x:String xml:space="preserve">
using System;
using Microsoft.UI;
using Microsoft.UI.Windowing;
using Microsoft.UI.Xaml;
using WinRT.Interop;

namespace YourNameSpace;
                    
public sealed partial class SampleWindow1 : Window
{
    private AppWindow appWindow;
                    
    public SampleWindow1()
    {
        this.InitializeComponent();

        // Retrieve the AppWindow instance for the current window
        appWindow = GetAppWindowForCurrentWindow();

        // Set the window title
        appWindow.Title = "$(WindowTitle)";

        // Set the window size (including borders)
        appWindow.Resize(new Windows.Graphics.SizeInt32($(Width), $(Height)));

        // Set the window position on screen
        appWindow.Move(new Windows.Graphics.PointInt32($(X), $(Y)));

        // Set the window icon
        appWindow.SetIcon("Assets/Tiles/GalleryIcon.ico");
    }

    //Returrns the AppWindow instance associated with the current window.
    private AppWindow GetAppWindowForCurrentWindow()
    {
        // Get the native window handle
        IntPtr hWnd = WindowNative.GetWindowHandle(this);

        // Retrieve the WindowId from the window handle
        WindowId myWndId = Win32Interop.GetWindowIdFromWindow(hWnd);

        // Return the AppWindow instance associated with the given WindowId
        return AppWindow.GetFromWindowId(myWndId);
    }
                    
    private void Show_Click(object sender, RoutedEventArgs e)
    {
        appWindow.Show();
    }

    private void Hide_Click(object sender, RoutedEventArgs e)
    {
        appWindow.Hide();
    }

    private void Close_Click(object sender, RoutedEventArgs e)
    {
        this.Close();
    }
}
                </x:String>
            </controls:ControlExample.CSharp>
            
            <controls:ControlExample.Substitutions>
                <controls:ControlExampleSubstitution Key="WindowTitle"
                                                     Value="{x:Bind WindowTitle.Text, Mode=OneWay}" />
                <controls:ControlExampleSubstitution Key="Width"
                                                     Value="{x:Bind WindowWidth.Value, Mode=OneWay}" />
                <controls:ControlExampleSubstitution Key="Height"
                                                     Value="{x:Bind WindowHeight.Value, Mode=OneWay}" />
                <controls:ControlExampleSubstitution Key="X"
                                                     Value="{x:Bind XPoint.Value, Mode=OneWay}" />
                <controls:ControlExampleSubstitution Key="Y"
                                                     Value="{x:Bind YPoint.Value, Mode=OneWay}" />
            </controls:ControlExample.Substitutions>
        </controls:ControlExample>

        <controls:ControlExample HeaderText="Centering AppWindow on the screen using the available display area.">
            <controls:ControlExample.Example>
                <Button Click="ShowSampleWindow2">Show centered sample window</Button>
            </controls:ControlExample.Example>
            <controls:ControlExample.Xaml>
                <x:String xml:space="preserve">
&lt;Window ...>
    &lt;StackPanel HorizontalAlignment="Center" VerticalAlignment="Center" Spacing="8">
        &lt;TextBlock Text="This is a centred sample window" Style="{ThemeResource TitleTextBlockStyle}" TextAlignment="Center" />
    &lt;/StackPanel>
&lt;/Window>
                </x:String>
            </controls:ControlExample.Xaml>
            <controls:ControlExample.CSharp>
                <x:String xml:space="preserve">
using System;
using Microsoft.UI;
using Microsoft.UI.Windowing;
using Microsoft.UI.Xaml;
using Windows.Graphics;
using WinRT.Interop;

namespace YourNameSpace;

public sealed partial class SampleWindow2 : Window
{
    private AppWindow appWindow;

    public SampleWindow2()
    {
        this.InitializeComponent();
        appWindow = GetAppWindowForCurrentWindow();

        // Center the window on the screen.
        CenterWindow(appWindow);
    }

    private AppWindow GetAppWindowForCurrentWindow()
    {
        IntPtr hWnd = WindowNative.GetWindowHandle(this);
        WindowId myWndId = Win32Interop.GetWindowIdFromWindow(hWnd);
        return AppWindow.GetFromWindowId(myWndId);
    }

    // Centers the given AppWindow on the screen based on the available display area.
    private void CenterWindow(AppWindow appWindow)
    {
        if (appWindow == null) return; // Ensure the AppWindow instance is valid.

        // Get the display area associated with the window.
        DisplayArea displayArea = DisplayArea.GetFromWindowId(appWindow.Id, DisplayAreaFallback.Nearest);
        if (displayArea == null) return; // Ensure the display area is valid.

        // Calculate the centered position within the work area.
        RectInt32 workArea = displayArea.WorkArea;
        PointInt32 centeredPosition = new PointInt32(
            (workArea.Width - appWindow.Size.Width) / 2,
            (workArea.Height - appWindow.Size.Height) / 2
        );

        appWindow.Move(centeredPosition); // Move the window to the calculated position.
    }
}
                </x:String>
            </controls:ControlExample.CSharp>
        </controls:ControlExample>
        
        <controls:ControlExample HeaderText="AppWindow with OverlapedPresenter">
            <controls:ControlExample.Example>
                <StackPanel>
                    <TextBlock Text="OverlappedPresenter is the default presenter for AppWindow, providing a standard resizable window with system buttons. It is used for typical app windows and can be customized to control resizing and button visibility." TextWrapping="Wrap"/>
                    <Button Margin="0,8,0,0"
                            Click="ShowSampleWindow3">Show sample window</Button>
                </StackPanel>
            </controls:ControlExample.Example>
            <controls:ControlExample.Options>
                <StackPanel Spacing="8">
                    <ToggleSwitch x:Name="IsAlwaysOnTop"
                                  Header="IsAlwaysOnTop"
                                  OffContent="false"
                                  OnContent="true"
                                  IsOn="False">
                        <ToolTipService.ToolTip>
                            <TextBlock Text="Keeps the window above all other windows when enabled."
                                       TextWrapping="Wrap" />
                        </ToolTipService.ToolTip>
                    </ToggleSwitch>
                    <ToggleSwitch x:Name="IsMaximizable"
                                  Header="IsMaximizable"
                                  OffContent="false"
                                  OnContent="true"
                                  IsOn="true">
                        <ToolTipService.ToolTip>
                            <TextBlock Text="Allows the window to be maximized to full screen."
                                       TextWrapping="Wrap" />
                        </ToolTipService.ToolTip>
                    </ToggleSwitch>
                    <ToggleSwitch x:Name="IsMinimizable"
                                  Header="IsMinimizable"
                                  OffContent="false"
                                  OnContent="true"
                                  IsOn="true">
                        <ToolTipService.ToolTip>
                            <TextBlock Text="Enables minimizing the window to the taskbar."
                                       TextWrapping="Wrap" />
                        </ToolTipService.ToolTip>
                    </ToggleSwitch>
                    <ToggleSwitch x:Name="IsResizable"
                                  Header="IsResizable"
                                  OffContent="false"
                                  OnContent="true"
                                  IsOn="true">
                        <ToolTipService.ToolTip>
                            <TextBlock Text="Allows resizing the window by dragging its edges."
                                       TextWrapping="Wrap" />
                        </ToolTipService.ToolTip>
                    </ToggleSwitch>
                    <ToggleSwitch x:Name="HasBorder"
                                  Header="HasBorder"
                                  OffContent="false"
                                  OnContent="true"
                                  IsOn="true"
                                  Toggled="HasBorder_Toggled">
                        <ToolTipService.ToolTip>
                            <TextBlock Text="Determines if the window has a visible outer border."
                                       TextWrapping="Wrap" />
                        </ToolTipService.ToolTip>
                    </ToggleSwitch>
                    <ToggleSwitch x:Name="HasTitleBar"
                                  Header="HasTitleBar"
                                  OffContent="false"
                                  OnContent="true"
                                  IsOn="true"
                                  Toggled="HasTitleBar_Toggled">
                        <ToolTipService.ToolTip>
                            <TextBlock Text="Specifies whether the window includes a system title bar."
                                       TextWrapping="Wrap" />
                        </ToolTipService.ToolTip>
                    </ToggleSwitch>
                </StackPanel>
            </controls:ControlExample.Options>
            <controls:ControlExample.Xaml>
                <x:String xml:space="preserve">
&lt;Window ...>
    &lt;StackPanel HorizontalAlignment="Center" VerticalAlignment="Center" Spacing="8">
        &lt;Button x:Name="MaximizeBtn" Content="Maximize" Click="MaximizeBtn_Click" Width="150" />
        &lt;Button x:Name="RestoreBtn" Content="Restore" Click="RestoreBtn_Click" Width="150" />
        &lt;Button x:Name="MinimizeBtn" Content="Minimize" Click="MinimizeBtn_Click" Width="150" />
    &lt;/StackPanel>
&lt;/Window>
                </x:String>
            </controls:ControlExample.Xaml>
            <controls:ControlExample.CSharp>
                <x:String xml:space="preserve">
using System;
using Microsoft.UI;
using Microsoft.UI.Windowing;
using Microsoft.UI.Xaml;
using WinRT.Interop;

namespace YourNameSpace;
                    
public sealed partial class SampleWindow3 : Window
{
    privare AppWindow appWindow;
    private OverlappedPresenter presenter;

    public SampleWindow3()
    {
        this.InitializeComponent();

        appWindow = GetAppWindowForCurrentWindow();

        presenter = OverlappedPresenter.Create();
        presenter.IsAlwaysOnTop = $(IsAlwaysOnTop);
        presenter.IsMaximizable = $(IsMaximizable);
        presenter.IsMinimizable = $(IsMinimizable);
        presenter.IsResizable = $(IsResizable);
        presenter.SetBorderAndTitleBar($(HasBorder),$(HasTitleBar));

        appWindow.SetPresenter(presenter);
    }

    private AppWindow GetAppWindowForCurrentWindow()
    {
        IntPtr hWnd = WindowNative.GetWindowHandle(this);
        WindowId myWndId = Win32Interop.GetWindowIdFromWindow(hWnd);
        return AppWindow.GetFromWindowId(myWndId);
    }

    private void MaximizeBtn_Click(object sender, RoutedEventArgs e)
    {
        presenter.Maximize();
    }

    private void MinimizeBtn_Click(object sender, RoutedEventArgs e)
    {
        presenter.Minimize();
    }

    private void RestoreBtn_Click(object sender, RoutedEventArgs e)
    {
        presenter.Restore();
    }
}
                </x:String>
            </controls:ControlExample.CSharp>
            
            <controls:ControlExample.Substitutions>
                <controls:ControlExampleSubstitution Key="IsAlwaysOnTop"
                                                     Value="{x:Bind BoolToLowerString(IsAlwaysOnTop.IsOn), Mode=OneWay}" />
                <controls:ControlExampleSubstitution Key="IsMaximizable"
                                                     Value="{x:Bind BoolToLowerString(IsMaximizable.IsOn), Mode=OneWay}" />
                <controls:ControlExampleSubstitution Key="IsMinimizable"
                                                     Value="{x:Bind BoolToLowerString(IsMinimizable.IsOn), Mode=OneWay}" />
                <controls:ControlExampleSubstitution Key="IsResizable"
                                                     Value="{x:Bind BoolToLowerString(IsResizable.IsOn), Mode=OneWay}" />
                <controls:ControlExampleSubstitution Key="HasBorder"
                                                     Value="{x:Bind BoolToLowerString(HasBorder.IsOn), Mode=OneWay}" />
                <controls:ControlExampleSubstitution Key="HasTitleBar"
                                                     Value="{x:Bind BoolToLowerString(HasTitleBar.IsOn), Mode=OneWay}" />
            </controls:ControlExample.Substitutions>
        </controls:ControlExample>

        <controls:ControlExample HeaderText="Modal window with OverlappedPresenter using AppWindow">
            <controls:ControlExample.Example>
                <StackPanel>
                    <TextBlock Text="A modal window is a separate window that blocks interaction with its parent window until it is closed, often used for critical actions like confirmations, authentication, or settings. Unlike a ContentDialog, which is a lightweight pop-up within the same window, a modal window is a fully independent window, making it suitable for multi-window applications or scenarios requiring more flexibility in layout and behavior."
                               TextWrapping="Wrap" />
                    <Button Margin="0,8,0,0"
                            Click="ShowSampleWindow4">Show modal window</Button>
                </StackPanel>
            </controls:ControlExample.Example>
            <controls:ControlExample.Xaml>
                <x:String xml:space="preserve">
&lt;Window ...>

    &lt;StackPanel HorizontalAlignment="Center" VerticalAlignment="Center" Spacing="8">

        &lt;TextBlock Text="Modal Window" Style="{ThemeResource TitleTextBlockStyle}" TextAlignment="Center" />

        &lt;TextBlock Text="This is a modal window created using AppWindow with OverlappedPresenter." Style="{ThemeResource BodyTextBlockStyle}" TextAlignment="Center" TextWrapping="Wrap" />

        &lt;StackPanel Orientation="Horizontal" HorizontalAlignment="Center" Spacing="8">
            &lt;Button Content="OK" Width="80" Click="OKButton_Click" />
            &lt;Button Content="Cancel" Width="80" Click="CancelButton_Click" />
        &lt;/StackPanel>

    &lt;/StackPanel>
&lt;/Window>
                </x:String>
            </controls:ControlExample.Xaml>
            <controls:ControlExample.CSharp>
                <x:String xml:space="preserve">
using System;
using System.Runtime.InteropServices;
using Microsoft.UI;
using Microsoft.UI.Windowing;
using Microsoft.UI.Xaml;
using WinRT.Interop;

namespace YourNamespace;

public sealed partial class SampleWindow4 : Window
{
    private AppWindow appWindow;

    public SampleWindow4()
    {
        this.InitializeComponent();

        appWindow = GetAppWindowForCurrentWindow();
        appWindow.Resize(new Windows.Graphics.SizeInt32(400, 300));

        // Create an OverlappedPresenter configured for a dialog window.
        // This ensures the window behaves like a modal dialog with appropriate styling.
        OverlappedPresenter presenter = OverlappedPresenter.CreateForDialog();

        // Set the owner of the modal window to ensure it remains linked to the main window.
        SetOwner(appWindow);

        // Enable modal behavior, preventing interaction with the main window until this window is closed.
        presenter.IsModal = true;

        // Apply the OverlappedPresenter configuration to the AppWindow.
        appWindow.SetPresenter(presenter);

        // Show the modal AppWindow.
        appWindow.Show();

        Closed += SampleWindow4_Closed;
    }

    private AppWindow GetAppWindowForCurrentWindow()
    {
        IntPtr hWnd = WindowNative.GetWindowHandle(this);
        WindowId myWndId = Win32Interop.GetWindowIdFromWindow(hWnd);
        return AppWindow.GetFromWindowId(myWndId);
    }

    private void SetOwner(AppWindow childAppWindow)
    {
        // Get HWND of the main window
        // The main window can be retrieved from App.xaml.cs if it's set as a static property.
        IntPtr parentHwnd = WindowNative.GetWindowHandle(App.StartupWindow);

        // Get HWND of the AppWindow
        IntPtr childHwnd = Win32Interop.GetWindowFromWindowId(childAppWindow.Id);

        // Set the owner using SetWindowLongPtr
        SetWindowLongPtr(childHwnd, -8, parentHwnd); // -8 = GWLP_HWNDPARENT
    }

    // Imports the SetWindowLongPtr function from user32.dll, allowing modification of window properties.
    // This is used to set the owner of the child AppWindow by changing its parent window handle.
    [DllImport("user32.dll", SetLastError = true)]
    private static extern IntPtr SetWindowLongPtr(IntPtr hWnd, int nIndex, IntPtr dwNewLong);

    private void OKButton_Click(object sender, RoutedEventArgs e)
    {
        this.Close();
    }

    private void CancelButton_Click(object sender, RoutedEventArgs e)
    {
        this.Close();
    }

    private void SampleWindow4_Closed(object sender, WindowEventArgs args)
    {
        App.StartupWindow.Activate();
    }
}                    
                </x:String>
            </controls:ControlExample.CSharp>
        </controls:ControlExample>

        <controls:ControlExample HeaderText="AppWindow with FullScreenPresenter">
            <controls:ControlExample.Example>
                <Button Click="ShowSampleWindow5">Show sample window</Button>
            </controls:ControlExample.Example>
            <controls:ControlExample.Xaml>
                <x:String xml:space="preserve">
&lt;Window ...>
    &lt;StackPanel HorizontalAlignment="Center" VerticalAlignment="Center" Spacing="8">
        &lt;TextBlock Text="This window is running in Fullscreen mode" Style="{ThemeResource TitleTextBlockStyle}" TextAlignment="Center" />
        &lt;Button x:Name="Close" Content="Close" Click="Close_Click" Width="150" HorizontalAlignment="Center" />
    &lt;/StackPanel>
&lt;/Window>
                </x:String>
            </controls:ControlExample.Xaml>
            <controls:ControlExample.CSharp>
                <x:String xml:space="preserve">
using System;
using Microsoft.UI;
using Microsoft.UI.Windowing;
using Microsoft.UI.Xaml;
using WinRT.Interop;

namespace YourNameSpace;

public sealed partial class SampleWindow5 : Window
{
    private AppWindow appWindow;

    public SampleWindow5()
    {
        this.InitializeComponent();
        appWindow = GetAppWindowForCurrentWindow();

        appWindow.SetPresenter(AppWindowPresenterKind.FullScreen);
    }

    private AppWindow GetAppWindowForCurrentWindow()
    {
        IntPtr hWnd = WindowNative.GetWindowHandle(this);
        WindowId myWndId = Win32Interop.GetWindowIdFromWindow(hWnd);
        return AppWindow.GetFromWindowId(myWndId);
    }

    private void Close_Click(object sender, RoutedEventArgs e)
    {
        this.Close();
    }
}
                </x:String>
            </controls:ControlExample.CSharp>
        </controls:ControlExample>

    </StackPanel>
</Page>
