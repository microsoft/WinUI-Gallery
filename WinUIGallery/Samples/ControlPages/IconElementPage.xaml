<Page
    x:Class="WinUIGallery.ControlPages.IconElementPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:animatedvisuals="using:Microsoft.UI.Xaml.Controls.AnimatedVisuals"
    xmlns:controls="using:WinUIGallery.Controls"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">
    <StackPanel>
        <controls:ControlExample x:Name="Example1" HeaderText="A BitmapIcon with a multicolor bitmap image">
            <controls:ControlExample.Example>
                <StackPanel>
                    <TextBlock
                        Margin="0,0,0,12"
                        Style="{ThemeResource BodyTextBlockStyle}"
                        Text="The ShowAsMonochrome property (true by default) will result in a solid block of the foreground color if the property is set to true and the icon is more than one color. This behavior can be ignored by setting the ShowAsMonochrome property to false." />
                    <BitmapIcon
                        x:Name="SlicesIcon"
                        Width="50"
                        HorizontalAlignment="Left"
                        ShowAsMonochrome="False"
                        UriSource="ms-appx:///Assets/SampleMedia/Slices.png" />
                </StackPanel>
            </controls:ControlExample.Example>
            <controls:ControlExample.Options>
                <CheckBox
                    x:Name="MonochromeButton"
                    Checked="MonochromeButton_CheckedChanged"
                    Content="Monochrome"
                    Unchecked="MonochromeButton_CheckedChanged" />
            </controls:ControlExample.Options>
            <controls:ControlExample.Xaml>
                <x:String>
                    &lt;BitmapIcon x:Name="SlicesIcon" UriSource="ms-appx:///Assets/SampleMedia/Slices.png" Width="50" ShowAsMonochrome="$(ShowAsMonochrome)"/&gt;
                </x:String>
            </controls:ControlExample.Xaml>
            <controls:ControlExample.Substitutions>
                <controls:ControlExampleSubstitution Key="ShowAsMonochrome" Value="{x:Bind MonochromeButton.IsChecked.Value, Mode=OneWay}" />
            </controls:ControlExample.Substitutions>
        </controls:ControlExample>
        <controls:ControlExample
            x:Name="Example2"
            HeaderText="A FontIcon using a glyph from a specific font family in a button"
            XamlSource="Icons/FontIconSample1_xaml.txt">
            <controls:ControlExample.Example>
                <StackPanel>
                    <TextBlock
                        Margin="0,0,0,12"
                        Style="{ThemeResource BodyTextBlockStyle}"
                        Text="Use FontIcon as the icon for a control if you want to specify a Glyph value from a FontFamily. Windows 10 uses the Segoe MDL2 Assets FontFamily and that is what this example is showing." />
                    <Button x:Name="ExampleButton1" AutomationProperties.Name="ExampleButton1">
                        <FontIcon FontFamily="Segoe MDL2 Assets" Glyph="&#xE790;" />
                    </Button>
                </StackPanel>
            </controls:ControlExample.Example>
        </controls:ControlExample>
        <controls:ControlExample
            x:Name="Example3"
            HeaderText="A ImageIcon using a bitmap image in a button"
            XamlSource="Icons/ImageIconSample1_xaml.txt">
            <controls:ControlExample.Example>
                <StackPanel>
                    <TextBlock
                        Margin="0,0,0,12"
                        Style="{ThemeResource BodyTextBlockStyle}"
                        Text="To use an ImageIcon as the icon for a control, you can set image that has a file format supported by the Image class. The two examples here show a PNG and SVG image as the icon." />
                    <Button
                        x:Name="ImageExample1"
                        Width="100"
                        AutomationProperties.Name="ImageExample1">
                        <ImageIcon Source="/Assets/SampleMedia/Slices.png" />
                    </Button>
                </StackPanel>
            </controls:ControlExample.Example>
        </controls:ControlExample>
        <controls:ControlExample
            x:Name="Example4"
            HeaderText="A ImageIcon using a SVG image in a button"
            XamlSource="Icons/ImageIconSample2_xaml.txt">
            <controls:ControlExample.Example>
                <Button x:Name="ImageExample2" AutomationProperties.Name="ImageExample2">
                    <ImageIcon Width="50" Source="https://raw.githubusercontent.com/DiemenDesign/LibreICONS/master/svg-color/libre-camera-panorama.svg" />
                </Button>
            </controls:ControlExample.Example>
        </controls:ControlExample>
        <controls:ControlExample
            x:Name="Example5"
            HeaderText="A PathIcon in a button"
            XamlSource="Icons/PathIconSample1_xaml.txt">
            <controls:ControlExample.Example>
                <StackPanel>
                    <TextBlock
                        Margin="0,0,0,12"
                        Style="{ThemeResource BodyTextBlockStyle}"
                        Text="To use a PathIcon as the icon for a control, you specify the path data of the image you are trying to display. The path data draws a series of connected lines and curves." />
                    <Button x:Name="Example1Button" AutomationProperties.Name="Example1Button">
                        <PathIcon HorizontalAlignment="Center" Data="F1 M 16,12 20,2L 20,16 1,16" />
                    </Button>
                </StackPanel>
            </controls:ControlExample.Example>
        </controls:ControlExample>
        <controls:ControlExample
            x:Name="Example6"
            HeaderText="A SymbolIcon in a button"
            XamlSource="Icons/SymbolIconSample_1_xaml.txt">
            <controls:ControlExample.Example>
                <StackPanel>
                    <TextBlock
                        Margin="0,0,0,12"
                        Style="{ThemeResource BodyTextBlockStyle}"
                        Text="To use a SymbolIcon as the icon for a control, you specify the enum value for the glyph you would like to display. SymbolIcon's enum is based off of icons from the Segoe MDL2 font used by Windows 10." />
                    <Button x:Name="AcceptButton" AutomationProperties.Name="AcceptButton">
                        <StackPanel>
                            <SymbolIcon Symbol="Accept" />
                            <TextBlock Text="Accept" />
                        </StackPanel>
                    </Button>
                </StackPanel>
            </controls:ControlExample.Example>
        </controls:ControlExample>
    </StackPanel>
</Page>
