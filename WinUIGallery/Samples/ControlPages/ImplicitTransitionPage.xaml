<Page
    x:Class="WinUIGallery.ControlPages.ImplicitTransitionPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:controls="using:WinUIGallery.Controls"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">
    <Page.Resources>
        <Style x:Name="FlyoutPresenterStyle" TargetType="FlyoutPresenter">
            <Setter Property="IsTabStop" Value="True" />
            <Setter Property="TabNavigation" Value="Cycle" />
        </Style>
    </Page.Resources>
    <StackPanel>
        <controls:ControlExample HeaderText="Automatically animate changes to Opacity">
            <Rectangle
                x:Name="OpacityRectangle"
                Width="50"
                Height="50"
                Margin="45,5,5,5"
                VerticalAlignment="Center"
                Fill="{ThemeResource SystemAccentColor}"
                Opacity="0.5" />

            <controls:ControlExample.Options>
                <StackPanel>
                    <NumberBox
                        x:Name="OpacityNumberBox"
                        Margin="5"
                        Header="Opacity (0.0 to 1.0)"
                        KeyDown="NumberBox_KeyDown"
                        Maximum="1"
                        Minimum="0"
                        Value="0.5" />
                    <Button
                        x:Name="OpacityBtn"
                        Margin="5"
                        HorizontalAlignment="Stretch"
                        Click="OpacityButton_Click"
                        Content="Set Opacity" />
                </StackPanel>
            </controls:ControlExample.Options>

            <controls:ControlExample.Xaml>
                <x:String xml:space="preserve">
&lt;!-- Automatically animate changes to Opacity --&gt;
&lt;Rectangle x:Name="rectangle" Width="50" Height="50" Opacity="0.5"&gt;
    &lt;Rectangle.OpacityTransition&gt;
        &lt;ScalarTransition /&gt;
    &lt;/Rectangle.OpacityTransition&gt;
&lt;/Rectangle&gt;
                </x:String>
            </controls:ControlExample.Xaml>
            <controls:ControlExample.CSharp>
                <x:String xml:space="preserve">
private void button_Click(object sender, RoutedEventArgs e)
{
    rectangle.Opacity = $(Opacity);
}
                </x:String>
            </controls:ControlExample.CSharp>
            <controls:ControlExample.Substitutions>
                <controls:ControlExampleSubstitution
                    Key="Opacity"
                    x:Name="OpacityValue"
                    Value="1.0" />
            </controls:ControlExample.Substitutions>
        </controls:ControlExample>

        <controls:ControlExample HeaderText="Automatically animate changes to Rotation">
            <Rectangle
                x:Name="RotationRectangle"
                Width="50"
                Height="50"
                Margin="45,5,5,5"
                VerticalAlignment="Center">
                <Rectangle.Fill>
                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                        <GradientStop Offset="0.0" Color="LightGray" />
                        <GradientStop Offset="1.0" Color="{ThemeResource SystemAccentColor}" />
                    </LinearGradientBrush>
                </Rectangle.Fill>
            </Rectangle>

            <controls:ControlExample.Options>
                <StackPanel>
                    <NumberBox
                        x:Name="RotationNumberBox"
                        Margin="5"
                        Header="Rotation (0.0 to 360.0)"
                        KeyDown="NumberBox_KeyDown"
                        Maximum="360"
                        Minimum="0"
                        Value="45" />
                    <Button
                        x:Name="RotateBtn"
                        Margin="5"
                        HorizontalAlignment="Stretch"
                        Click="RotationButton_Click"
                        Content="Set Rotation" />
                </StackPanel>
            </controls:ControlExample.Options>

            <controls:ControlExample.Xaml>
                <x:String xml:space="preserve">
&lt;!-- Automatically animate changes to Rotation --&gt;
&lt;Rectangle x:Name="rectangle" Width="50" Height="50" Rotation="0" &gt;
    &lt;Rectangle.RotationTransition&gt;
        &lt;ScalarTransition /&gt;
    &lt;/Rectangle.RotationTransition&gt;
&lt;/Rectangle&gt;
                </x:String>
            </controls:ControlExample.Xaml>
            <controls:ControlExample.CSharp>
                <x:String xml:space="preserve">
private void button_Click(object sender, RoutedEventArgs e)
{
    rectangle.Rotation = $(Rotation);  // Clockwise, in degrees
}
                </x:String>
            </controls:ControlExample.CSharp>
            <controls:ControlExample.Substitutions>
                <controls:ControlExampleSubstitution
                    Key="Rotation"
                    x:Name="RotationValue"
                    Value="45" />
            </controls:ControlExample.Substitutions>
        </controls:ControlExample>

        <controls:ControlExample HeaderText="Automatically animate changes to Scale">
            <Rectangle
                x:Name="ScaleRectangle"
                Width="50"
                Height="50"
                Margin="45,5,5,5"
                VerticalAlignment="Top"
                Fill="{ThemeResource SystemAccentColor}" />

            <controls:ControlExample.Options>
                <StackPanel>
                    <Button
                        Margin="5"
                        HorizontalAlignment="Stretch"
                        Click="ScaleButton_Click"
                        Content="Set Scale to (0.5, 0.5, 0.5)"
                        Tag="0.5" />
                    <Button
                        Margin="5"
                        HorizontalAlignment="Stretch"
                        Click="ScaleButton_Click"
                        Content="Set Scale to (1.0, 1.0, 1.0)"
                        Tag="1.0" />
                    <Button
                        Margin="5"
                        HorizontalAlignment="Stretch"
                        Click="ScaleButton_Click"
                        Content="Set Scale to (2.0, 2.0, 2.0)"
                        Tag="2.0" />
                    <TextBlock Text="Components" />
                    <CheckBox
                        x:Name="ScaleX"
                        Content="Animate X"
                        IsChecked="True" />
                    <CheckBox
                        x:Name="ScaleY"
                        Content="Animate Y"
                        IsChecked="True" />
                    <CheckBox
                        x:Name="ScaleZ"
                        Content="Animate Z"
                        IsChecked="True" />
                    <NumberBox
                        x:Name="ScaleNumberBox"
                        Margin="5"
                        Header="Scale (0.0 to 5.0)"
                        KeyDown="NumberBox_KeyDown"
                        Maximum="5"
                        Minimum="0"
                        Value="1" />
                    <Button
                        x:Name="ScaleBtn"
                        Margin="5"
                        HorizontalAlignment="Stretch"
                        Click="ScaleButton_Click"
                        Content="Set custom scale" />
                </StackPanel>
            </controls:ControlExample.Options>
            <controls:ControlExample.Xaml>
                <x:String xml:space="preserve">
&lt;!-- Automatically animate changes to Scale --&gt;
&lt;Rectangle x:Name="rectangle" Width="50" Height="50" Scale="1,1,1" &gt;
    &lt;Rectangle.ScaleTransition&gt;
        &lt;Vector3Transition /&gt;
    &lt;/Rectangle.ScaleTransition&gt;
&lt;/Rectangle&gt;
                </x:String>
            </controls:ControlExample.Xaml>
            <controls:ControlExample.CSharp>
                <x:String xml:space="preserve">
using System.Numerics;
private void button_Click(object sender, RoutedEventArgs e)
{
    rectangle.Scale = new Vector3($(Scale), $(Scale), $(Scale));
}
                </x:String>
            </controls:ControlExample.CSharp>
            <controls:ControlExample.Substitutions>
                <controls:ControlExampleSubstitution
                    Key="Scale"
                    x:Name="ScaleValue"
                    Value="1" />
            </controls:ControlExample.Substitutions>
        </controls:ControlExample>

        <controls:ControlExample HeaderText="Automatically animate changes to Translation">
            <Rectangle
                x:Name="TranslateRectangle"
                Width="50"
                Height="50"
                Margin="45,5,5,5"
                VerticalAlignment="Top"
                Fill="{ThemeResource SystemAccentColor}" />

            <controls:ControlExample.Options>
                <StackPanel>
                    <Button
                        Margin="5"
                        HorizontalAlignment="Stretch"
                        Click="TranslateButton_Click"
                        Content="Set Translation to (0, 0, 0)"
                        Tag="0" />
                    <Button
                        Margin="5"
                        HorizontalAlignment="Stretch"
                        Click="TranslateButton_Click"
                        Content="Set Translation to (100, 100, 100)"
                        Tag="100" />
                    <Button
                        Margin="5"
                        HorizontalAlignment="Stretch"
                        Click="TranslateButton_Click"
                        Content="Set Translation to (200, 200, 200)"
                        Tag="200" />

                    <TextBlock Text="Components" />
                    <CheckBox
                        x:Name="TranslateX"
                        Content="Animate X"
                        IsChecked="True" />
                    <CheckBox
                        x:Name="TranslateY"
                        Content="Animate Y"
                        IsChecked="True" />
                    <CheckBox
                        x:Name="TranslateZ"
                        Content="Animate Z"
                        IsChecked="True" />
                    <NumberBox
                        x:Name="TranslationNumberBox"
                        Margin="5"
                        Header="Translation (0.0 to 200.0)"
                        KeyDown="NumberBox_KeyDown"
                        Maximum="200"
                        Minimum="0"
                        Value="1" />
                    <Button
                        x:Name="TranslateBtn"
                        Margin="5"
                        HorizontalAlignment="Stretch"
                        Click="TranslateButton_Click"
                        Content="Set custom Translation" />
                </StackPanel>
            </controls:ControlExample.Options>
            <controls:ControlExample.Xaml>
                <x:String xml:space="preserve">
&lt;!-- Automatically animate changes to Translation --&gt;
&lt;Rectangle x:Name="rectangle" Width="50" Height="50" Translation="0,0,0" &gt;
    &lt;Rectangle.TranslationTransition&gt;
        &lt;Vector3Transition /&gt;
    &lt;/Rectangle.TranslationTransition&gt;
&lt;/Rectangle&gt;
                </x:String>
            </controls:ControlExample.Xaml>
            <controls:ControlExample.CSharp>
                <x:String xml:space="preserve">
using System.Numerics;
private void button_Click(object sender, RoutedEventArgs e)
{
    rectangle.Translation = new Vector3($(Translation), $(Translation), $(Translation));
}
                </x:String>
            </controls:ControlExample.CSharp>
            <controls:ControlExample.Substitutions>
                <controls:ControlExampleSubstitution
                    Key="Translation"
                    x:Name="TranslationValue"
                    Value="1" />
            </controls:ControlExample.Substitutions>
        </controls:ControlExample>

        <controls:ControlExample HeaderText="Implicitly animate when the Background changes">
            <ContentPresenter
                x:Name="BrushPresenter"
                Width="50"
                Height="50"
                Margin="45,5,5,5"
                VerticalAlignment="Top"
                Background="Blue" />
            <controls:ControlExample.Options>
                <Button
                    x:Name="BgColorBtn"
                    Click="BackgroundButton_Click"
                    Content="Change Background Color" />
            </controls:ControlExample.Options>
            <controls:ControlExample.Xaml>
                <x:String xml:space="preserve">
&lt;ContentPresenter x:Name="BrushPresenter" Background="Blue" Width="50" Height="50"&gt;
    &lt;ContentPresenter.BackgroundTransition&gt;
        &lt;BrushTransition /&gt;
    &lt;/ContentPresenter.BackgroundTransition&gt;
&lt;/ContentPresenter&gt;
                </x:String>
            </controls:ControlExample.Xaml>
            <controls:ControlExample.CSharp>
                <x:String xml:space="preserve">
private void button_Click(object sender, RoutedEventArgs e)
{
    // Note that this is a new brush instance, not a new color on the same brush.
    if (HasBlueBackground(BrushPresenter))
    {
        BrushPresenter.Background = new SolidColorBrush(Yellow);
    }
    else
    {
        BrushPresenter.Background = new SolidColorBrush(Blue);
    }
}
                </x:String>
            </controls:ControlExample.CSharp>
        </controls:ControlExample>

        <controls:ControlExample HeaderText="Implicitly animate when the Grid's theme changes">
            <Grid
                x:Name="ThemeExampleGrid"
                Width="300"
                MinHeight="200"
                VerticalAlignment="Top"
                Background="{ThemeResource SolidBackgroundFillColorBaseBrush}"
                BorderBrush="DimGray"
                BorderThickness="1"
                RequestedTheme="Light">
                <StackPanel Margin="12" Spacing="6">
                    <TextBlock Style="{ThemeResource SubtitleTextBlockStyle}" Text="Lorem Ipsum" />
                    <TextBlock Text="The background of this grid animates when the theme changes." TextWrapping="WrapWholeWords" />
                    <Button Content="Button" />
                    <CheckBox Content="CheckBox" />
                </StackPanel>
            </Grid>
            <controls:ControlExample.Options>
                <Button
                    x:Name="ChangeThemeBtn"
                    VerticalAlignment="Top"
                    Click="ThemeButton_Click"
                    Content="Change Theme" />
            </controls:ControlExample.Options>
            <controls:ControlExample.Xaml>
                <x:String xml:space="preserve">
&lt;Grid x:Name="ThemeExampleGrid" Background="{ThemeResource SolidBackgroundFillColorBaseBrush}" &gt;
    &lt;Grid.BackgroundTransition&gt;
        &lt;BrushTransition /&gt;
    &lt;/Grid.BackgroundTransition&gt;
    &lt;StackPanel Margin="12" Spacing="6"&gt;
        &lt;TextBlock Text="Lorem Ipsum" Style="{ThemeResource SubtitleTextBlockStyle}" /&gt;
        &lt;TextBlock Text="The background of this grid animates when the theme changes." TextWrapping="WrapWholeWords" /&gt;
        &lt;Button Content="Button" /&gt;
        &lt;CheckBox Content="CheckBox" /&gt;
    &lt;/StackPanel&gt;
&lt;/Grid&gt;
                </x:String>
            </controls:ControlExample.Xaml>
            <controls:ControlExample.CSharp>
                <x:String xml:space="preserve">
private void ThemeButton_Click(object sender, RoutedEventArgs e)
{
    ThemeExampleGrid.RequestedTheme = ThemeExampleGrid.RequestedTheme == ElementTheme.Dark ? ElementTheme.Light : ElementTheme.Dark;
}
</x:String>
            </controls:ControlExample.CSharp>
        </controls:ControlExample>
    </StackPanel>
</Page>
