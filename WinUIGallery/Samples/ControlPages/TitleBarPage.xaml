<!--
    //*********************************************************
    //
    // Copyright (c) Microsoft. All rights reserved.
    // THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
    // ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
    // IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
    // PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
    //
    //*********************************************************
-->

<Page
    x:Class="WinUIGallery.ControlPages.TitleBarPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="using:WinUIGallery.Controls"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:wuxdata="using:Microsoft.UI.Xaml.Data"
    mc:Ignorable="d">

    <Page.Resources>
        <x:Double x:Key="SwatchSize">32</x:Double>
    </Page.Resources>

    <StackPanel>
        <controls:ControlExample CSharpSource="Window\TitleBar\TitleBarSample2.txt" HeaderText="Default titlebar (when no user defined titlebar is set)">
            <controls:ControlExample.Example>
                <StackPanel Orientation="Vertical" Spacing="10">
                    <TextBlock TextWrapping="WrapWholeWords">
                        WinUI provides a default titlebar in such cases where the user doesn't explicitly provide a uielement, for setting the titlebar. The system titlebar (Windows-provided titlebar) disappears and client area content is extended to non client area.
                        In this default case, entire non client region (titlebar region) get system titlebar behaviors like drag regions, system menu on context click etc.<LineBreak />
                        This is the recommended way of using TitleBar apis and covers most common scenarios.<LineBreak />
                        It can be applied by just calling ExtendsContentIntoTitleBar api. This internally calls SetTitleBar api with null argument and provides the default case.<LineBreak />
                        Use the button below to toggle between system titlebar and default custom titlebar.</TextBlock>
                    <StackPanel
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Top"
                        Orientation="Horizontal"
                        Spacing="20">
                        <Button x:Name="defaultTitleBar" Click="defaultTitleBar_Click" />
                    </StackPanel>
                </StackPanel>
            </controls:ControlExample.Example>
        </controls:ControlExample>
        <controls:ControlExample CSharpSource="Window/TitleBar/TitleBarSample1.txt" HeaderText="User defined UIElement as custom titlebar for the window">
            <controls:ControlExample.Example>
                <StackPanel Orientation="Vertical" Spacing="10">
                    <TextBlock TextWrapping="WrapWholeWords">
                        For finer controls, a user can set a top-level UIElement (defined as appTitleBar here) as titlebar for the window. The system titlebar disappears and the chosen uielement starts acting like the titlebar (gets all system titlebar behavior).<LineBreak />
                        The Background and Foreground Color dropdowns set the foreground and background of titlebar and caption buttons respectively.<LineBreak />
                        Use the button below to toggle between system titlebar and custom WinUI titlebar.</TextBlock>
                    <StackPanel
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Top"
                        Orientation="Horizontal"
                        Spacing="10">
                        <Button x:Name="customTitleBar" Click="customTitleBar_Click" />
                        <TextBlock>Background Color</TextBlock>
                        <SplitButton
                            x:Name="myBgColorButton"
                            MinWidth="0"
                            MinHeight="0"
                            Padding="0"
                            VerticalAlignment="Top"
                            AutomationProperties.Name="Background color">
                            <Border
                                x:Name="BackgroundColorElement"
                                Width="{StaticResource SwatchSize}"
                                Height="{StaticResource SwatchSize}"
                                Margin="0"
                                Background="Transparent"
                                CornerRadius="4,0,0,4" />
                            <SplitButton.Flyout>
                                <Flyout Placement="Auto">
                                    <GridView IsItemClickEnabled="True" ItemClick="BgGridView_ItemClick">
                                        <GridView.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <ItemsWrapGrid MaximumRowsOrColumns="3" Orientation="Horizontal" />
                                            </ItemsPanelTemplate>
                                        </GridView.ItemsPanel>
                                        <GridView.Resources>
                                            <Style TargetType="Rectangle">
                                                <Setter Property="Width" Value="{StaticResource SwatchSize}" />
                                                <Setter Property="Height" Value="{StaticResource SwatchSize}" />
                                                <Setter Property="RadiusX" Value="4" />
                                                <Setter Property="RadiusY" Value="4" />
                                            </Style>
                                        </GridView.Resources>
                                        <GridView.Items>
                                            <Rectangle AutomationProperties.Name="Transparent" Fill="Transparent" />
                                            <Rectangle AutomationProperties.Name="Red" Fill="Red" />
                                            <Rectangle AutomationProperties.Name="Orange" Fill="Orange" />
                                            <Rectangle AutomationProperties.Name="Yellow" Fill="Yellow" />
                                            <Rectangle AutomationProperties.Name="Green" Fill="Green" />
                                            <Rectangle AutomationProperties.Name="Blue" Fill="Blue" />
                                            <Rectangle AutomationProperties.Name="White" Fill="White" />
                                            <Rectangle AutomationProperties.Name="Black" Fill="Black" />
                                        </GridView.Items>
                                    </GridView>

                                </Flyout>
                            </SplitButton.Flyout>
                        </SplitButton>

                        <TextBlock>Foreground Color</TextBlock>
                        <SplitButton
                            x:Name="myFgColorButton"
                            MinWidth="0"
                            MinHeight="0"
                            Padding="0"
                            VerticalAlignment="Top"
                            AutomationProperties.Name="Foreground color">
                            <Border
                                x:Name="ForegroundColorElement"
                                Width="{StaticResource SwatchSize}"
                                Height="{StaticResource SwatchSize}"
                                Margin="0"
                                Background="Transparent"
                                CornerRadius="4,0,0,4" />
                            <SplitButton.Flyout>
                                <Flyout Placement="Auto">
                                    <GridView IsItemClickEnabled="True" ItemClick="FgGridView_ItemClick">
                                        <GridView.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <ItemsWrapGrid MaximumRowsOrColumns="3" Orientation="Horizontal" />
                                            </ItemsPanelTemplate>
                                        </GridView.ItemsPanel>
                                        <GridView.Resources>
                                            <Style TargetType="Rectangle">
                                                <Setter Property="Width" Value="{StaticResource SwatchSize}" />
                                                <Setter Property="Height" Value="{StaticResource SwatchSize}" />
                                                <Setter Property="RadiusX" Value="4" />
                                                <Setter Property="RadiusY" Value="4" />
                                            </Style>
                                        </GridView.Resources>
                                        <GridView.Items>
                                            <Rectangle AutomationProperties.Name="Transparent" Fill="Transparent" />
                                            <Rectangle AutomationProperties.Name="Red" Fill="Red" />
                                            <Rectangle AutomationProperties.Name="Orange" Fill="Orange" />
                                            <Rectangle AutomationProperties.Name="Yellow" Fill="Yellow" />
                                            <Rectangle AutomationProperties.Name="Green" Fill="Green" />
                                            <Rectangle AutomationProperties.Name="Blue" Fill="Blue" />
                                            <Rectangle AutomationProperties.Name="White" Fill="White" />
                                            <Rectangle AutomationProperties.Name="Black" Fill="Black" />
                                        </GridView.Items>
                                    </GridView>

                                </Flyout>
                            </SplitButton.Flyout>
                        </SplitButton>

                    </StackPanel>
                </StackPanel>
            </controls:ControlExample.Example>
            <controls:ControlExample.Xaml>
                <x:String xml:space="preserve">
&lt;!--UIElement set as titlebar--&gt;
&lt;Border x:Name="AppTitleBar" Grid.Column="1" VerticalAlignment="Top"&gt;
    &lt;TextBlock x:Name="AppTitle" Text="{StaticResource AppTitleName}" VerticalAlignment="Top" Margin="0,8,0,0" /&gt;
&lt;/Border&gt;
            </x:String>
            </controls:ControlExample.Xaml>
        </controls:ControlExample>
        <controls:ControlExample HeaderText="Titlebar Customizations : Titlebar height">
            <controls:ControlExample.Example>
                <StackPanel Orientation="Vertical" Spacing="10">
                    <TextBlock TextWrapping="Wrap">
                        WinUI custom titlebar supports setting a custom height by configuring the PreferredHeightOption property of the titlebar. This feature is useful when you need to adjust the titlebar height to match your app's design or accommodate additional content.
                    </TextBlock>
                    <InfoBar
                        IsClosable="false"
                        IsOpen="true"
                        Severity="Warning">
                        <TextBlock>
                            This option will be invalid when the style of titlebar is reset to system titlebar!
                        </TextBlock>
                    </InfoBar>
                    <StackPanel>
                        <ComboBox
                            x:Name="titlebarHeight"
                            Header="Set titlebar height"
                            SelectedIndex="0"
                            SelectionChanged="TitleBarHeightComboBox_SelectionChanged">
                            <x:String>Tall</x:String>
                            <x:String>Standard</x:String>
                            <x:String>Collapsed</x:String>
                        </ComboBox>
                    </StackPanel>
                </StackPanel>
            </controls:ControlExample.Example>
            <controls:ControlExample.CSharp>
                <x:String xml:space="preserve">
// Retrieve the main window and extend its content into the title bar for custom styling.
Window window = App.MainWindow;
window.ExtendsContentIntoTitleBar = true;

// Set the preferred height option for the title bar
window.AppWindow.TitleBar.PreferredHeightOption = TitleBarHeightOption.$(TitleBarHeightOption);
                </x:String>
            </controls:ControlExample.CSharp>
            <controls:ControlExample.Substitutions>
                <controls:ControlExampleSubstitution Key="TitleBarHeightOption" Value="{x:Bind titlebarHeight.SelectedItem, Mode=OneWay}" />
            </controls:ControlExample.Substitutions>
        </controls:ControlExample>
        <controls:ControlExample CSharpSource="Window\TitleBar\TitleBarSample3.txt" HeaderText="Titlebar Customizations : Interactive controls in Titlebar (non client) area">
            <controls:ControlExample.Example>
                <StackPanel Orientation="Vertical" Spacing="10">
                    <TextBlock TextWrapping="WrapWholeWords">
                        WinUI custom titlebar now hosting interactive clickable controls within non client region of the window, when using custom titlebar.<LineBreak />
                        This is achieved by using lower level <Hyperlink NavigateUri="https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowtitlebar">
                            Microsoft.UI.AppWindowTitlebar
                        </Hyperlink>
                        and <Hyperlink NavigateUri="https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputnonclientpointersource">Microsoft.UI.Input.InputNonClientPointerSource</Hyperlink>
                        <Italic>apis</Italic>
                        <LineBreak />
                        <LineBreak />
                        WinUI allows<Bold>mix and match</Bold>
                        of higher level WinUI custom titlebar apis with lower level AppWindow and InputNonClientPointerSource apis for most cases.
                        One exception is one should not use<Italic>Window.SetTitlebar</Italic>
                        api along with any lower level api which also sets drag regions as it can result in unexpected behavior.
                        If needed, set<Italic>Window.SetTitlebar</Italic>
                        to null (default case) and proceed to use lower level apis for drag functionality.<LineBreak />
                        Use the button below to toggle between system titlebar and default custom titlebar.</TextBlock>
                    <StackPanel
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Top"
                        Orientation="Horizontal"
                        Spacing="20">
                        <Button x:Name="addInteractiveElements" Click="AddInteractiveElements_Click">Add interactive control to titlebar</Button>
                    </StackPanel>
                </StackPanel>
            </controls:ControlExample.Example>
        </controls:ControlExample>

    </StackPanel>
</Page>
