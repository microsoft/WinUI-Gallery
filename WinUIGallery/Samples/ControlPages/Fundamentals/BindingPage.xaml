<?xml version="1.0" encoding="utf-8" ?>
<Page
    x:Class="WinUIGallery.ControlPages.BindingPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="using:WinUIGallery.Controls"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <StackPanel>
        <StackPanel Margin="0,12,0,0" Spacing="12">
            <RichTextBlock>
                <Paragraph FontWeight="SemiBold">Key concepts</Paragraph>
                <Paragraph>• Target: The property of a control to which data is bound (e.g., Text, Background, Visibility).</Paragraph>
                <Paragraph>• Source: The data being bound, such as a property in a class, another control, or a static resource.</Paragraph>
                <Paragraph>• Binding Modes:</Paragraph>
                <Paragraph xml:space="preserve">    ◦ OneWay updates the target when the source changes.</Paragraph>
                <Paragraph xml:space="preserve">    ◦ TwoWay updates both the target and the source.</Paragraph>
                <Paragraph xml:space="preserve">    ◦ OneTime sets the target once and does not update afterward.</Paragraph>
            </RichTextBlock>

            <RichTextBlock>
                <Paragraph>
                    <Run Text="Learn more about the differences between" />
                    <Run FontFamily="Consolas" Text="x:Bind" />
                    <Run Text="and" />
                    <Run FontFamily="Consolas" Text="Binding" />
                    <Run Text="by visiting" />
                     <Hyperlink NavigateUri="https://learn.microsoft.com/windows/apps/develop/data-binding/data-binding-in-depth#xbind-and-binding-feature-comparison">Microsoft Learn</Hyperlink>.</Paragraph>
            </RichTextBlock>
        </StackPanel>

        <controls:ControlExample HeaderText="Binding between controls" XamlSource="Binding\BindingSample1_xaml.txt">
            <controls:ControlExample.Example>
                <StackPanel Spacing="12">
                    <Grid ColumnSpacing="12">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="auto" />
                            <ColumnDefinition Width="auto" />
                            <ColumnDefinition Width="auto" />
                        </Grid.ColumnDefinitions>

                        <StackPanel Grid.Column="0" Spacing="8">
                            <TextBlock FontWeight="SemiBold" Text="OneWay binding" />
                            <TextBox
                                x:Name="SourceTextBoxOneWay"
                                MinWidth="380"
                                HorizontalAlignment="Left"
                                PlaceholderText="Enter text here" />
                            <TextBox
                                x:Name="TargetTextBoxOneWay"
                                MinWidth="380"
                                HorizontalAlignment="Left"
                                PlaceholderText="Mirrors above text"
                                Text="{x:Bind SourceTextBoxOneWay.Text, Mode=OneWay}" />
                        </StackPanel>

                        <AppBarSeparator Grid.Column="1" />

                        <StackPanel Grid.Column="2" Spacing="8">
                            <TextBlock FontWeight="SemiBold" Text="TwoWay binding" />
                            <TextBox
                                x:Name="SourceTextBoxTwoWay"
                                MinWidth="380"
                                HorizontalAlignment="Left"
                                PlaceholderText="Enter text here" />
                            <TextBox
                                x:Name="TargetTextBoxTwoWay"
                                MinWidth="380"
                                HorizontalAlignment="Left"
                                PlaceholderText="Mirrors and edits above text"
                                Text="{x:Bind SourceTextBoxTwoWay.Text, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                        </StackPanel>
                    </Grid>
                    <RichTextBlock>
                        <Paragraph>
                            <Run Text="In" />
                            <Run FontWeight="Semibold" Text="OneWay" />
                            <Run Text="binding mode, changes in the source (SourceTextBox) are reflected in the target, but not vice versa." />
                        </Paragraph>
                        <Paragraph>
                            <Run Text="In" />
                            <Run FontWeight="Semibold" Text="TwoWay" />
                            <Run Text="binding mode, changes in either box update the other." />
                        </Paragraph>
                    </RichTextBlock>
                </StackPanel>
            </controls:ControlExample.Example>
        </controls:ControlExample>

        <controls:ControlExample HeaderText="Binding to a property in code-behind">
            <controls:ControlExample.Example>
                <StackPanel Spacing="8">
                    <TextBlock
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        FontSize="24"
                        Text="{x:Bind GreetingMessage}" />
                </StackPanel>
            </controls:ControlExample.Example>
            <controls:ControlExample.Xaml>
                <x:String xml:space="preserve">
&lt;TextBlock
    Text="{x:Bind GreetingMessage}"
    FontSize="24"
    HorizontalAlignment="Center"
    VerticalAlignment="Center" /&gt;
                </x:String>
            </controls:ControlExample.Xaml>
            <controls:ControlExample.CSharp>
                <x:String xml:space="preserve">
// Code-behind
public string GreetingMessage { get; set; } = "Hello, WinUI 3!";
                </x:String>
            </controls:ControlExample.CSharp>
        </controls:ControlExample>

        <controls:ControlExample
            CSharpSource="Binding\BindingSample3_csharp.txt"
            HeaderText="Using a function in x:Bind"
            XamlSource="Binding\BindingSample3_xaml.txt">
            <controls:ControlExample.Example>
                <StackPanel Spacing="8">
                    <DatePicker x:Name="DatePickerControl" Header="Select a date" />
                    <TextBlock Text="{x:Bind FormatDate(DatePickerControl.SelectedDate), Mode=OneWay}" />
                </StackPanel>
            </controls:ControlExample.Example>
        </controls:ControlExample>

        <controls:ControlExample
            CSharpSource="Binding\BindingSample4_csharp.txt"
            HeaderText="Using a converter in Binding"
            XamlSource="Binding\BindingSample4_xaml.txt">
            <controls:ControlExample.Example>
                <StackPanel Spacing="8">
                    <TextBox
                        x:Name="InputTextBox"
                        Width="300"
                        Header="Enter Text:" />

                    <TextBlock Text="The input is not empty." Visibility="{x:Bind InputTextBox.Text, Mode=OneWay, Converter={StaticResource emptyStringToVisibilityConverter}}" />
                </StackPanel>
            </controls:ControlExample.Example>
        </controls:ControlExample>

        <controls:ControlExample CSharpSource="Binding\BindingSample5_csharp.txt" HeaderText="Binding to a view model">
            <controls:ControlExample.Example>
                <StackPanel Spacing="8">
                    <TextBlock FontWeight="SemiBold" Text="Title:" />
                    <TextBlock FontSize="16" Text="{x:Bind ViewModel.Title, Mode=OneWay}" />

                    <TextBlock FontWeight="SemiBold" Text="Description:" />
                    <TextBlock FontSize="16" Text="{x:Bind ViewModel.Description, Mode=OneWay}" />
                </StackPanel>
            </controls:ControlExample.Example>
            <controls:ControlExample.Xaml>
                <x:String xml:space="preserve">
&lt;TextBlock Text="Title:" FontWeight="SemiBold" /&gt;
&lt;TextBlock Text="{Binding Title}" FontSize="16" /&gt;

&lt;TextBlock Text="Description:" FontWeight="SemiBold" /&gt;
&lt;TextBlock Text="{Binding Description}" FontSize="16" /&gt;
                </x:String>
            </controls:ControlExample.Xaml>
        </controls:ControlExample>
        <InfoBar
            Title="MVVM Toolkit"
            Margin="0,8,0,0"
            IsClosable="False"
            IsOpen="True"
            Message="The MVVM Toolkit, part of the .NET Community Toolkit, is designed to simplify the implementation of the Model-View-ViewModel (MVVM) pattern in applications. The toolkit includes a sample app to demonstrate its features and usage."
            Severity="Informational">
            <InfoBar.ActionButton>
                <HyperlinkButton
                    x:Name="mvvmToolkitSampleAppHyperlinkButton"
                    Content="Go to the MVVM Toolkit repository"
                    NavigateUri="https://github.com/CommunityToolkit/MVVM-Samples" />
            </InfoBar.ActionButton>
        </InfoBar>

        <controls:ControlExample HeaderText="Binding with TargetNullValue">
            <controls:ControlExample.Example>
                <StackPanel Spacing="8">
                    <TextBlock Text="{x:Bind ViewModel.NullString, Mode=OneWay, TargetNullValue='Anonymous User'}" />
                </StackPanel>
            </controls:ControlExample.Example>
            <controls:ControlExample.Xaml>
                <x:String xml:space="preserve">
&lt;!--TargetNullValue property help handle scenarios where the binding source is null--&gt;
&lt;TextBlock Text="{Binding ViewModel.NullString, Mode=OneWay, TargetNullValue='Anonymous User'}" /&gt;
                </x:String>
            </controls:ControlExample.Xaml>
            <controls:ControlExample.CSharp>
                <x:String xml:space="preserve">
public YourPage()
{
    this.InitializeComponent();

    ViewModel = new ExampleViewModel
    {
        NullString = null
    };
                    
    DataContext = ViewModel;
}
                </x:String>
            </controls:ControlExample.CSharp>
        </controls:ControlExample>
    </StackPanel>
</Page>
