// Mica/Acrylic comprehensive example showing all 5 backdrop types
WindowsSystemDispatcherQueueHelper m_wsdqHelper; // See separate sample below for implementation
Microsoft.UI.Composition.SystemBackdrops.MicaController m_micaController;
Microsoft.UI.Composition.SystemBackdrops.SystemBackdropConfiguration m_configurationSource;
Microsoft.UI.Composition.SystemBackdrops.DesktopAcrylicController m_acrylicController;

public bool TrySetBackdrop(int backdropType)
{
    // Clean up previous controllers if any
    m_micaController?.Dispose();
    m_micaController = null;
    m_acrylicController?.Dispose();
    m_acrylicController = null;

    if (backdropType == 0)
        return true; // No background requested

    m_wsdqHelper ??= new WindowsSystemDispatcherQueueHelper();
    m_wsdqHelper.EnsureWindowsSystemDispatcherQueueController();

    m_configurationSource ??= new Microsoft.UI.Composition.SystemBackdrops.SystemBackdropConfiguration();
    this.Activated += Window_Activated;
    this.Closed += Window_Closed;
    ((FrameworkElement)this.Content).ActualThemeChanged += Window_ThemeChanged;

    m_configurationSource.IsInputActive = true;
    SetConfigurationSourceTheme();

    var target = this.As<Microsoft.UI.Composition.ICompositionSupportsSystemBackdrop>();

    switch (backdropType)
    {
        case 1: // Mica Base
            if (!Microsoft.UI.Composition.SystemBackdrops.MicaController.IsSupported())
                return false;
            m_micaController = new Microsoft.UI.Composition.SystemBackdrops.MicaController
            {
                Kind = Microsoft.UI.Composition.SystemBackdrops.MicaKind.Base
            };
            m_micaController.AddSystemBackdropTarget(target);
            m_micaController.SetSystemBackdropConfiguration(m_configurationSource);
            break;

        case 2: // Mica BaseAlt
            if (!Microsoft.UI.Composition.SystemBackdrops.MicaController.IsSupported())
                return false;
            m_micaController = new Microsoft.UI.Composition.SystemBackdrops.MicaController
            {
                Kind = Microsoft.UI.Composition.SystemBackdrops.MicaKind.BaseAlt
            };
            m_micaController.AddSystemBackdropTarget(target);
            m_micaController.SetSystemBackdropConfiguration(m_configurationSource);
            break;

        case 3: // Acrylic Base
            if (!Microsoft.UI.Composition.SystemBackdrops.DesktopAcrylicController.IsSupported())
                return false;
            m_acrylicController = new Microsoft.UI.Composition.SystemBackdrops.DesktopAcrylicController
            {
                Kind = Microsoft.UI.Composition.SystemBackdrops.DesktopAcrylicKind.Base
            };
            m_acrylicController.AddSystemBackdropTarget(target);
            m_acrylicController.SetSystemBackdropConfiguration(m_configurationSource);
            break;

        case 4: // Acrylic Thin
            if (!Microsoft.UI.Composition.SystemBackdrops.DesktopAcrylicController.IsSupported())
                return false;
            m_acrylicController = new Microsoft.UI.Composition.SystemBackdrops.DesktopAcrylicController
            {
                Kind = Microsoft.UI.Composition.SystemBackdrops.DesktopAcrylicKind.Thin
            };
            m_acrylicController.AddSystemBackdropTarget(target);
            m_acrylicController.SetSystemBackdropConfiguration(m_configurationSource);
            break;

        default:
            return false; // Unknown type
    }

    return true;
}

private void Window_Activated(object sender, WindowActivatedEventArgs args)
{
    m_configurationSource.IsInputActive = args.WindowActivationState != WindowActivationState.Deactivated;
}

private void Window_Closed(object sender, WindowEventArgs args)
{
    // Make sure any Mica/Acrylic controller is disposed
    m_micaController?.Dispose();
    m_micaController = null;
    m_acrylicController?.Dispose();
    m_acrylicController = null;
    m_configurationSource = null;

    this.Activated -= Window_Activated;
    this.Closed -= Window_Closed;
    ((FrameworkElement)this.Content).ActualThemeChanged -= Window_ThemeChanged;
}

private void Window_ThemeChanged(FrameworkElement sender, object args)
{
    if (m_configurationSource != null)
    {
        SetConfigurationSourceTheme();
    }
}

private void SetConfigurationSourceTheme()
{
    switch (((FrameworkElement)this.Content).ActualTheme)
    {
        case ElementTheme.Dark:    m_configurationSource.Theme = SystemBackdropTheme.Dark; break;
        case ElementTheme.Light:   m_configurationSource.Theme = SystemBackdropTheme.Light; break;
        case ElementTheme.Default: m_configurationSource.Theme = SystemBackdropTheme.Default; break;
    }
}