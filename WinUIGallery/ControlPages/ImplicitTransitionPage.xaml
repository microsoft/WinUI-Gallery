<Page
    x:Class="AppUIBasics.ControlPages.ImplicitTransitionPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:AppUIBasics"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">
    <Page.Resources>
        <Style TargetType="FlyoutPresenter" x:Name="FlyoutPresenterStyle">
            <Setter Property="IsTabStop" Value="True"/>
            <Setter Property="TabNavigation" Value="Cycle"/>
        </Style>
    </Page.Resources>
    <StackPanel>
        <local:ControlExample HeaderText="Automatically animate changes to Opacity">
            <Rectangle x:Name="OpacityRectangle" Width="50" Height="50" Fill="{ThemeResource SystemAccentColor}" VerticalAlignment="Center" Margin="45,5,5,5" Opacity="0.5" />

            <local:ControlExample.Options>
                <StackPanel>
                    <NumberBox x:Name="OpacityNumberBox" Header="Opacity (0.0 to 1.0)" 
                                    Value="0.5" Margin="5" Maximum="1" Minimum="0"  KeyDown="NumberBox_KeyDown"/>
                    <Button x:Name="OpacityBtn" Content="Set Opacity" Margin="5" Click="OpacityButton_Click" HorizontalAlignment="Stretch" />
                </StackPanel>
            </local:ControlExample.Options>

            <local:ControlExample.Xaml>
                <x:String xml:space="preserve">
&lt;!-- Automatically animate changes to Opacity --&gt;
&lt;Rectangle x:Name="rectangle" Width="50" Height="50" Opacity="0.5"&gt;
    &lt;Rectangle.OpacityTransition&gt;
        &lt;ScalarTransition /&gt;
    &lt;/Rectangle.OpacityTransition&gt;
&lt;/Rectangle&gt;
                </x:String>
            </local:ControlExample.Xaml>
            <local:ControlExample.CSharp>
                <x:String xml:space="preserve">
private void button_Click(object sender, RoutedEventArgs e)
{
    rectangle.Opacity = $(Opacity);
}
                </x:String>
            </local:ControlExample.CSharp>
            <local:ControlExample.Substitutions>
                <local:ControlExampleSubstitution x:Name="OpacityValue" Key="Opacity" Value="1.0" />
            </local:ControlExample.Substitutions>
        </local:ControlExample>

        <local:ControlExample HeaderText="Automatically animate changes to Rotation" >
            <Rectangle x:Name="RotationRectangle" Width="50" Height="50" VerticalAlignment="Center" Margin="45,5,5,5" >
                <Rectangle.Fill>
                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                        <GradientStop Color="LightGray" Offset="0.0" />
                        <GradientStop Color="{ThemeResource SystemAccentColor}" Offset="1.0" />
                    </LinearGradientBrush>
                </Rectangle.Fill>
            </Rectangle>

            <local:ControlExample.Options>
                <StackPanel>
                    <NumberBox x:Name="RotationNumberBox" Header="Rotation (0.0 to 360.0)" Value="45" Margin="5" 
                                    Minimum="0" Maximum="360"  KeyDown="NumberBox_KeyDown"/>
                    <Button x:Name="RotateBtn"  Content="Set Rotation" Margin="5" Click="RotationButton_Click" HorizontalAlignment="Stretch"/>
                </StackPanel>
            </local:ControlExample.Options>

            <local:ControlExample.Xaml>
                <x:String xml:space="preserve">
&lt;!-- Automatically animate changes to Rotation --&gt;
&lt;Rectangle x:Name="rectangle" Width="50" Height="50" Rotation="0" &gt;
    &lt;Rectangle.RotationTransition&gt;
        &lt;ScalarTransition /&gt;
    &lt;/Rectangle.RotationTransition&gt;
&lt;/Rectangle&gt;
                </x:String>
            </local:ControlExample.Xaml>
            <local:ControlExample.CSharp>
                <x:String xml:space="preserve">
private void button_Click(object sender, RoutedEventArgs e)
{
    rectangle.Rotation = $(Rotation);  // Clockwise, in degrees
}
                </x:String>
            </local:ControlExample.CSharp>
            <local:ControlExample.Substitutions>
                <local:ControlExampleSubstitution x:Name="RotationValue" Key="Rotation" Value="45" />
            </local:ControlExample.Substitutions>
        </local:ControlExample>

        <local:ControlExample HeaderText="Automatically animate changes to Scale" >
            <Rectangle x:Name="ScaleRectangle" Width="50" Height="50" Fill="{ThemeResource SystemAccentColor}" VerticalAlignment="Top" Margin="45,5,5,5" />

            <local:ControlExample.Options>
                <StackPanel>
                    <Button Content="Set Scale to (0.5, 0.5, 0.5)" Tag="0.5" Margin="5" Click="ScaleButton_Click" HorizontalAlignment="Stretch" />
                    <Button Content="Set Scale to (1.0, 1.0, 1.0)" Tag="1.0" Margin="5" Click="ScaleButton_Click" HorizontalAlignment="Stretch" />
                    <Button Content="Set Scale to (2.0, 2.0, 2.0)" Tag="2.0" Margin="5" Click="ScaleButton_Click" HorizontalAlignment="Stretch" />
                    <TextBlock Text="Components" />
                    <CheckBox x:Name="ScaleX" Content="Animate X" IsChecked="True" />
                    <CheckBox x:Name="ScaleY" Content="Animate Y" IsChecked="True" />
                    <CheckBox x:Name="ScaleZ" Content="Animate Z" IsChecked="True" />
                    <NumberBox x:Name="ScaleNumberBox" Header="Scale (0.0 to 5.0)" Value="1" 
                                    Minimum="0" Maximum="5" Margin="5" KeyDown="NumberBox_KeyDown" />
                    <Button x:Name="ScaleBtn"  Content="Set custom scale" Click="ScaleButton_Click" Margin="5" HorizontalAlignment="Stretch" />
                </StackPanel>
            </local:ControlExample.Options>
            <local:ControlExample.Xaml>
                <x:String xml:space="preserve">
&lt;!-- Automatically animate changes to Scale --&gt;
&lt;Rectangle x:Name="rectangle" Width="50" Height="50" Scale="1,1,1" &gt;
    &lt;Rectangle.ScaleTransition&gt;
        &lt;Vector3Transition /&gt;
    &lt;/Rectangle.ScaleTransition&gt;
&lt;/Rectangle&gt;
                </x:String>
            </local:ControlExample.Xaml>
            <local:ControlExample.CSharp>
                <x:String xml:space="preserve">
using System.Numerics;
private void button_Click(object sender, RoutedEventArgs e)
{
    rectangle.Scale = new Vector3($(Scale), $(Scale), $(Scale));
}
                </x:String>
            </local:ControlExample.CSharp>
            <local:ControlExample.Substitutions>
                <local:ControlExampleSubstitution x:Name="ScaleValue" Key="Scale" Value="1" />
            </local:ControlExample.Substitutions>
        </local:ControlExample>

        <local:ControlExample HeaderText="Automatically animate changes to Translation" >
            <Rectangle x:Name="TranslateRectangle" Width="50" Height="50" Fill="{ThemeResource SystemAccentColor}" VerticalAlignment="Top" Margin="45,5,5,5" />

            <local:ControlExample.Options>
                <StackPanel>
                    <Button Content="Set Translation to (0, 0, 0)" Tag="0" Margin="5" Click="TranslateButton_Click" HorizontalAlignment="Stretch" />
                    <Button Content="Set Translation to (100, 100, 100)" Tag="100" Margin="5" Click="TranslateButton_Click" HorizontalAlignment="Stretch" />
                    <Button Content="Set Translation to (200, 200, 200)" Tag="200" Margin="5" Click="TranslateButton_Click" HorizontalAlignment="Stretch" />

                    <TextBlock Text="Components" />
                    <CheckBox x:Name="TranslateX" Content="Animate X" IsChecked="True" />
                    <CheckBox x:Name="TranslateY" Content="Animate Y" IsChecked="True" />
                    <CheckBox x:Name="TranslateZ" Content="Animate Z" IsChecked="True" />
                    <NumberBox x:Name="TranslationNumberBox" Header="Translation (0.0 to 200.0)" Value="1"
                                    Minimum="0" Maximum="200" Margin="5" KeyDown="NumberBox_KeyDown" />
                    <Button x:Name="TranslateBtn" Content="Set custom Translation" Margin="5" Click="TranslateButton_Click" HorizontalAlignment="Stretch" />
                </StackPanel>
            </local:ControlExample.Options>
            <local:ControlExample.Xaml>
                <x:String xml:space="preserve">
&lt;!-- Automatically animate changes to Translation --&gt;
&lt;Rectangle x:Name="rectangle" Width="50" Height="50" Translation="0,0,0" &gt;
    &lt;Rectangle.TranslationTransition&gt;
        &lt;Vector3Transition /&gt;
    &lt;/Rectangle.TranslationTransition&gt;
&lt;/Rectangle&gt;
                </x:String>
            </local:ControlExample.Xaml>
            <local:ControlExample.CSharp>
                <x:String xml:space="preserve">
using System.Numerics;
private void button_Click(object sender, RoutedEventArgs e)
{
    rectangle.Translation = new Vector3($(Translation), $(Translation), $(Translation));
}
                </x:String>
            </local:ControlExample.CSharp>
            <local:ControlExample.Substitutions>
                <local:ControlExampleSubstitution x:Name="TranslationValue" Key="Translation" Value="1" />
            </local:ControlExample.Substitutions>
        </local:ControlExample>

        <local:ControlExample HeaderText="Implicitly animate when the Background changes" >
            <ContentPresenter x:Name="BrushPresenter" Background="Blue" Width="50" Height="50" VerticalAlignment="Top" Margin="45,5,5,5" />
            <local:ControlExample.Options>
                <Button x:Name="BgColorBtn" Content="Change Background Color" Click="BackgroundButton_Click"  />
            </local:ControlExample.Options>
            <local:ControlExample.Xaml>
                <x:String xml:space="preserve">
&lt;ContentPresenter x:Name="BrushPresenter" Background="Blue" Width="50" Height="50"&gt;
    &lt;ContentPresenter.BackgroundTransition&gt;
        &lt;BrushTransition /&gt;
    &lt;/ContentPresenter.BackgroundTransition&gt;
&lt;/ContentPresenter&gt;
                </x:String>
            </local:ControlExample.Xaml>
            <local:ControlExample.CSharp>
                <x:String xml:space="preserve">
private void button_Click(object sender, RoutedEventArgs e)
{
    // Note that this is a new brush instance, not a new color on the same brush.
    if (HasBlueBackground(BrushPresenter))
    {
        BrushPresenter.Background = new SolidColorBrush(Yellow);
    }
    else
    {
        BrushPresenter.Background = new SolidColorBrush(Blue);
    }
}
                </x:String>
            </local:ControlExample.CSharp>
        </local:ControlExample>

        <local:ControlExample HeaderText="Implicitly animate when the Grid's theme changes" >
            <Grid x:Name="ThemeExampleGrid" 
                  BorderThickness="1" 
                  BorderBrush="DimGray" 
                  Background="{ThemeResource ApplicationPageBackgroundThemeBrush}" 
                  Width="300" 
                  MinHeight="200" 
                  VerticalAlignment="Top" 
                  RequestedTheme="Light">
                <StackPanel Margin="12" Spacing="6">
                    <TextBlock Text="Lorem Ipsum" Style="{ThemeResource SubheaderTextBlockStyle}" />
                    <TextBlock Text="The background of this grid animates when the theme changes." TextWrapping="WrapWholeWords" />
                    <Button Content="Button" />
                    <CheckBox Content="CheckBox" />
                </StackPanel>
            </Grid>
            <local:ControlExample.Options>
                <Button x:Name="ChangeThemeBtn" Content="Change Theme" Click="ThemeButton_Click" VerticalAlignment="Top"  />
            </local:ControlExample.Options>
            <local:ControlExample.Xaml>
                <x:String xml:space="preserve">
&lt;Grid x:Name="ThemeExampleGrid" Background="{ThemeResource ApplicationPageBackgroundThemeBrush}" &gt;
    &lt;Grid.BackgroundTransition&gt;
        &lt;BrushTransition /&gt;
    &lt;/Grid.BackgroundTransition&gt;
    &lt;StackPanel Margin="12" Spacing="6"&gt;
        &lt;TextBlock Text="Lorem Ipsum" Style="{ThemeResource SubheaderTextBlockStyle}" /&gt;
        &lt;TextBlock Text="The background of this grid animates when the theme changes." TextWrapping="WrapWholeWords" /&gt;
        &lt;Button Content="Button" /&gt;
        &lt;CheckBox Content="CheckBox" /&gt;
    &lt;/StackPanel&gt;
&lt;/Grid&gt;
                </x:String>
            </local:ControlExample.Xaml>
            <local:ControlExample.CSharp>
                <x:String xml:space="preserve">
private void ThemeButton_Click(object sender, RoutedEventArgs e)
{
    ThemeExampleGrid.RequestedTheme = ThemeExampleGrid.RequestedTheme == ElementTheme.Dark ? ElementTheme.Light : ElementTheme.Dark;
}
</x:String>
            </local:ControlExample.CSharp>
        </local:ControlExample>
    </StackPanel>
</Page>
