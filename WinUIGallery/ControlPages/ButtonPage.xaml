<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
-->
<Page x:Class="AppUIBasics.ControlPages.ButtonPage" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:local="using:AppUIBasics"
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:contract7Present="http://schemas.microsoft.com/winfx/2006/xaml/presentation?IsApiContractPresent(Windows.Foundation.UniversalApiContract,7)"
      mc:Ignorable="d">
    <StackPanel>
        <local:ControlExample x:Name="Example1" HeaderText="A simple Button with text content.">
            <local:ControlExample.Example>
                <Button x:Name="Button1" Content="Standard XAML button" Click="Button_Click"
                    IsEnabled="{x:Bind DisableButton1.IsChecked.Value.Equals(x:False), Mode=OneWay}" />
            </local:ControlExample.Example>
            <local:ControlExample.Output>
                <TextBlock x:Name="Control1Output" FontFamily="Global User Interface"/>
            </local:ControlExample.Output>
            <local:ControlExample.Options>
                <StackPanel>
                    <CheckBox x:Name="DisableButton1" Content="Disable button" />
                </StackPanel>
            </local:ControlExample.Options>
            <local:ControlExample.Xaml>
                <x:String>
                    &lt;Button Content="Standard XAML button" Click="Button_Click" $(IsEnabled)/&gt;
                </x:String>
            </local:ControlExample.Xaml>
            <local:ControlExample.Substitutions>
                    <local:ControlExampleSubstitution Key="IsEnabled" IsEnabled="{x:Bind DisableButton1.IsChecked.Value, Mode=OneWay}"
                                                  Value= "IsEnabled=&quot;False&quot; "/>
            </local:ControlExample.Substitutions>
        </local:ControlExample>
        
        <local:ControlExample x:Name="Example2" HeaderText="A Button with graphical content.">
            <local:ControlExample.Example>
                <StackPanel Orientation="Horizontal">
                    <Button x:Name="Button2" Click="Button_Click" Width="50" Height="50" AutomationProperties.Name="Pie">
                        <Image Source="/Assets/Slices.png" AutomationProperties.Name="Slice"/>
                    </Button>
                </StackPanel>
            </local:ControlExample.Example>
            <local:ControlExample.Output>
                <TextBlock x:Name="Control2Output"/>
            </local:ControlExample.Output>
            <local:ControlExample.Xaml>
                <x:String xml:space="preserve">
&lt;Button Content="Button" Click="Button_Click" AutomationProperties.Name="Pie"&gt;
    &lt;Image Source="/Assets/Slices.png" AutomationProperties.Name="Slice"/&gt;
&lt;/Button&gt;
                </x:String>
            </local:ControlExample.Xaml>
        </local:ControlExample>
        <local:ControlExample HeaderText="Wrapping Buttons with large content">
            <StackPanel>
                <TextBlock Text="The following buttons' content may get clipped if we don't pay careful attention to their layout containers." Margin="0,0,0,8" TextWrapping="Wrap"/>
                <TextBlock Text="One option to mitigate clipped content is to place Buttons underneath each other, allowing for more space to grow horizontally:" Margin="0,0,0,8" TextWrapping="Wrap"/>
                <Button HorizontalAlignment="Stretch" Margin="0,0,0,5">This is some text that is too long and will get cut off</Button>
                <Button HorizontalAlignment="Stretch">This is another text that would result in being cut off</Button>

                <TextBlock Text="Another option is to explicitly wrap the Button's content" Margin="0,8,0,8"/>
                <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                    <Button MaxWidth="240" Margin="0,0,8,0">
                        <TextBlock Text="This is some text that is too long and will get cut off" TextWrapping="WrapWholeWords"/>
                    </Button>
                    <Button MaxWidth="240">
                        <TextBlock Text="This is another text that would result in being cut off" TextWrapping="WrapWholeWords"/>
                    </Button>
                </StackPanel>
            </StackPanel>
            <local:ControlExample.Xaml>
                <x:String xml:space="preserve">
&lt;StackPanel&gt;
    &lt;TextBlock Text="The following buttons' content may get clipped if we don't pay careful attention to their layout containers." Margin="0,0,0,8" TextWrapping="Wrap"/&gt;
    &lt;TextBlock Text="One option to mitigate clipped content is to place Buttons underneath each other, allowing for more space to grow horizontally:" Margin="0,0,0,8" TextWrapping="Wrap"/&gt;
    &lt;Button HorizontalAlignment="Stretch" Margin="0,0,0,5"&gt;This is some text that is too long and will get cut off&lt;/Button&gt;
    &lt;Button HorizontalAlignment="Stretch"&gt;This is another text that would result in being cut off&lt;/Button&gt;

    &lt;TextBlock Text="Another option is to explicitly wrap the Button's content" Margin="0,8,0,8"/&gt;
    &lt;StackPanel Orientation="Horizontal" HorizontalAlignment="Center"&gt;
        &lt;Button MaxWidth="240" Margin="0,0,8,0"&gt;
            &lt;TextBlock Text="This is some text that is too long and will get cut off" TextWrapping="WrapWholeWords"/&gt;
        &lt;/Button&gt;
        &lt;Button MaxWidth="240"&gt;
            &lt;TextBlock Text="This is another text that would result in being cut off" TextWrapping="WrapWholeWords"/&gt;
        &lt;/Button&gt;
    &lt;/StackPanel&gt;
&lt;/StackPanel&gt;
                </x:String>
            </local:ControlExample.Xaml>
        </local:ControlExample>

        <local:ControlExample HeaderText="Accent style applied to Button.">
            <local:ControlExample.Example>
                <Button Style="{StaticResource AccentButtonStyle}" Content="Accent style button"/>
            </local:ControlExample.Example>
            <local:ControlExample.Xaml>
                <x:String >
                    &lt;Button Style="{StaticResource AccentButtonStyle}" Content="Accent style button" /&gt;
                </x:String>
            </local:ControlExample.Xaml>
        </local:ControlExample>
        
    </StackPanel>
</Page>
