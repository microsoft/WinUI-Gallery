<!--
    //*********************************************************
    //
    // Copyright (c) Microsoft. All rights reserved.
    // THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
    // ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
    // IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
    // PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
    //
    //*********************************************************
-->

<Page
    x:Class="WinUIGallery.ControlPages.TitleBarPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:local="using:WinUIGallery"
    xmlns:data="using:WinUIGallery.Data"
    xmlns:wuxdata="using:Microsoft.UI.Xaml.Data"
    mc:Ignorable="d">

    <Page.Resources>
        <x:Double x:Key="SwatchSize">32</x:Double>
    </Page.Resources>

    <StackPanel>
        <InfoBar IsOpen="True" IsClosable="False" Margin="0,12">
            <TextBlock>
                TitleBar control is now available in <Hyperlink NavigateUri="https://learn.microsoft.com/windows/apps/windows-app-sdk/experimental-channel#required-c-project-changes-for-16-experimental1">Experimental</Hyperlink>!

                Preview samples for TitleBar at <Hyperlink NavigateUri="https://github.com/microsoft/WinUI-Gallery/blob/feature/TitleBarExperimental/WinUIGallery/ControlPages/TitleBarPage.xaml">feature/TitleBarExperimental</Hyperlink>
            </TextBlock>

        </InfoBar>
        

        
        <local:ControlExample HeaderText="Default TitleBar (also called system TitleBar)"
                              XamlSource="Window\TitleBar\TitleBarSample1_xaml.txt"
                              CSharpSource="Window\TitleBar\TitleBarSample1_cs.txt">
            <local:ControlExample.Example>
                <StackPanel Orientation="Vertical" Spacing="10">
                    <TextBlock TextWrapping="WrapWholeWords">
                        Windows provides a default TitleBar (also called "system TitleBar") if the user doesn't create a custom TitleBar. When the user creates a custom TitleBar, all visible parts of the system TitleBar disappear. (execpt the caption butttons)
                        <LineBreak></LineBreak>
                        This is the recommended way of using the TitleBar APIs and covers most common scenarios.
                        <LineBreak></LineBreak>
                        It can be applied by setting the ExtendsContentIntoTitleBar property of a Window to true (NOT IN XAML!!!). This internally calls the SetTitleBar method with a value of null.
                        <LineBreak></LineBreak>
                        The SetTitleBar method should be called with the UIElement for the custom TitleBar.
                        <LineBreak></LineBreak>
                        Use the button below to toggle between the system TitleBar and the custom titlebar.
                    </TextBlock>
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Stretch" VerticalAlignment="Top" Spacing="20">
                        <Button x:Name="defaultTitleBar" Click="defaultTitleBar_Click"></Button>
                    </StackPanel>
                </StackPanel>
            </local:ControlExample.Example>
        </local:ControlExample>
        <local:ControlExample HeaderText="Titlebar Customization : Changing color"
                              CSharpSource="Window\TitleBar\TitleBarSample2.txt">
            <local:ControlExample.Example>
                <StackPanel Orientation="Vertical" Spacing="10">
                    <TextBlock TextWrapping="WrapWholeWords">
                        Changing the color of the system TitleBar and/or caption buttons is done with the AppWindowTitleBar class. This class has properties for changing the TitleBar colors. (example: BackgroundColor, ForegroundColor, etc.) 
                        <LineBreak></LineBreak>
                        Use the button below to toggle between the system TitleBar and the custom TitleBar. Use the color pickers to change the color of the TitleBar.
                    </TextBlock>
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Stretch" VerticalAlignment="Top" Spacing="10">
                        <Button x:Name="customTitleBar" Click="customTitleBar_Click"></Button>
                        <TextBlock> Background Color</TextBlock>
                        <SplitButton x:Name="myBgColorButton" AutomationProperties.Name="Background color" Padding="0" MinHeight="0" MinWidth="0" VerticalAlignment="Top">
                            <Border x:Name="BackgroundColorElement" Width="{StaticResource SwatchSize}"
                                    Height="{StaticResource SwatchSize}" Background="Transparent" Margin="0" CornerRadius="4,0,0,4"/>
                            <SplitButton.Flyout>
                                <Flyout Placement="Auto">
                                    <GridView ItemClick="BgGridView_ItemClick" IsItemClickEnabled="True">
                                        <GridView.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <ItemsWrapGrid MaximumRowsOrColumns="3" Orientation="Horizontal"/>
                                            </ItemsPanelTemplate>
                                        </GridView.ItemsPanel>
                                        <GridView.Resources>
                                            <Style TargetType="Rectangle">
                                                <Setter Property="Width" Value="{StaticResource SwatchSize}"/>
                                                <Setter Property="Height" Value="{StaticResource SwatchSize}"/>
                                                <Setter Property="RadiusX" Value="4"/>
                                                <Setter Property="RadiusY" Value="4"/>
                                            </Style>
                                        </GridView.Resources>
                                        <GridView.Items>
                                            <Rectangle Fill="Transparent" AutomationProperties.Name="Transparent"/>
                                            <Rectangle Fill="Red" AutomationProperties.Name="Red"/>
                                            <Rectangle Fill="Orange" AutomationProperties.Name="Orange"/>
                                            <Rectangle Fill="Yellow" AutomationProperties.Name="Yellow"/>
                                            <Rectangle Fill="Green" AutomationProperties.Name="Green"/>
                                            <Rectangle Fill="Blue" AutomationProperties.Name="Blue"/>
                                            <Rectangle Fill="White" AutomationProperties.Name="White"/>
                                            <Rectangle Fill="Black" AutomationProperties.Name="Black"/>
                                        </GridView.Items>
                                    </GridView>

                                </Flyout>
                            </SplitButton.Flyout>
                        </SplitButton>

                        <TextBlock> Foreground Color</TextBlock>
                        <SplitButton x:Name="myFgColorButton" AutomationProperties.Name="Foreground color" Padding="0" MinHeight="0" MinWidth="0" VerticalAlignment="Top">
                            <Border x:Name="ForegroundColorElement" Width="{StaticResource SwatchSize}" Height="{StaticResource SwatchSize}" Background="Transparent" Margin="0" CornerRadius="4,0,0,4"/>
                            <SplitButton.Flyout>
                                <Flyout Placement="Auto">
                                    <GridView ItemClick="FgGridView_ItemClick" IsItemClickEnabled="True">
                                        <GridView.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <ItemsWrapGrid MaximumRowsOrColumns="3" Orientation="Horizontal"/>
                                            </ItemsPanelTemplate>
                                        </GridView.ItemsPanel>
                                        <GridView.Resources>
                                            <Style TargetType="Rectangle">
                                                <Setter Property="Width" Value="{StaticResource SwatchSize}"/>
                                                <Setter Property="Height" Value="{StaticResource SwatchSize}"/>
                                                <Setter Property="RadiusX" Value="4"/>
                                                <Setter Property="RadiusY" Value="4"/>
                                            </Style>
                                        </GridView.Resources>
                                        <GridView.Items>
                                            <Rectangle Fill="Transparent" AutomationProperties.Name="Transparent"/>
                                            <Rectangle Fill="Red" AutomationProperties.Name="Red"/>
                                            <Rectangle Fill="Orange" AutomationProperties.Name="Orange"/>
                                            <Rectangle Fill="Yellow" AutomationProperties.Name="Yellow"/>
                                            <Rectangle Fill="Green" AutomationProperties.Name="Green"/>
                                            <Rectangle Fill="Blue" AutomationProperties.Name="Blue"/>
                                            <Rectangle Fill="White" AutomationProperties.Name="White"/>
                                            <Rectangle Fill="Black" AutomationProperties.Name="Black"/>
                                        </GridView.Items>
                                    </GridView>

                                </Flyout>
                            </SplitButton.Flyout>
                        </SplitButton>

                    </StackPanel>
                </StackPanel>
            </local:ControlExample.Example>

        </local:ControlExample>
        <local:ControlExample HeaderText="Titlebar Customization : Changing the height of the TitleBar"
                      CSharpSource="Window\TitleBar\TitleBarSample3.txt">
            <local:ControlExample.Example>
                <StackPanel Orientation="Vertical" Spacing="10">
                    <TextBlock TextWrapping="WrapWholeWords">
                The system TitleBar has a default hight of 24px. The height of the system TitleBar can not be changed for one app. It can only be changed for every app that uses it.
                When using a custom TitleBar the user has three options for Caption buttton height which can be set with the PreferredHeightOption property. 1. Collapsed = 0px 2. Standard = 32px 3. Tall = 48px.
                        <LineBreak></LineBreak>
                Use the buttons below to change the size of the TitleBar.
                    </TextBlock>
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Stretch" VerticalAlignment="Top" Spacing="10">
                        <Button x:Name="collapsedTitleBar" Click="collapsedTitleBar_Click">Collapsed</Button>
                        <Button x:Name="systemTitleBar" Click="systemTitleBar_Click">System</Button>
                        <Button x:Name="standardTitleBar" Click="standardTitleBar_Click">Standard</Button>
                        <Button x:Name="tallTitleBar" Click="tallTitleBar_Click">Tall</Button>
                    </StackPanel>
                </StackPanel>
            </local:ControlExample.Example>

        </local:ControlExample>
        <local:ControlExample HeaderText="Titlebar Customization : Interactive controls in the Titlebar area"
                      XamlSource="Window\TitleBar\TitleBarSample4_xaml.txt"
                              CSharpSource="Window\TitleBar\TitleBarSample4_cs.txt">
            <local:ControlExample.Example>
                <StackPanel Orientation="Vertical" Spacing="10">
                    <TextBlock TextWrapping="WrapWholeWords">
                        Adding interactive controls to the TitleBar is achieved by setting a click through region for the TitleBar.
                        <LineBreak></LineBreak>
                        In a click through region all TitleBar features are disabled and the area starts functioning like a normal part of the window. Add a click through region is done with the low level
                        <Hyperlink NavigateUri="https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowtitlebar">
                           Microsoft.UI.AppWindowTitlebar
                        </Hyperlink>
                        and
                        <Hyperlink NavigateUri="https://learn.microsoft.com/en-us/windows/windows-app-sdk/api/winrt/microsoft.ui.input.inputnonclientpointersource?view=windows-app-sdk-1.5">
                            Microsoft.UI.NonClientInputPointerSource
                        </Hyperlink>
                        classes.
                        <LineBreak></LineBreak>
                        <LineBreak></LineBreak>
                        Windows allows <Bold>mixing and matching</Bold> of the higher level WinUI custom TitleBar APIs with the lower level NonClientInputPointerSource APIs for most cases.
                        There is one exception where only one API should be used. Do not use the <Italic> Window.SetTitlebar </Italic> method along with any low level API which sets drag / click through regions as it can result in unexpected behavior.
                        If needed, call<Italic> Window.SetTitlebar(null) </Italic>(default case) and use the lower level APIs for drag functionality.
                        <LineBreak></LineBreak>
                        Use the button below to add / remove a TextBox to / from the TitleBar.
                    </TextBlock>
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Stretch" VerticalAlignment="Top" Spacing="20">
                        <Button x:Name="addInteractiveElements" Click="AddInteractiveElements_Click">Add a TextBox to the TitleBar</Button>
                    </StackPanel>
                </StackPanel>
            </local:ControlExample.Example>
        </local:ControlExample>

    </StackPanel>
</Page>
