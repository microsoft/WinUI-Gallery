// To see the source code: 
// https://github.com/microsoft/WinUI-Gallery/blob/main/WinUIGallery/ConnectedAnimationPages/CollectionPage.xaml.cs
// https://github.com/microsoft/WinUI-Gallery/blob/main/WinUIGallery/ConnectedAnimationPages/DetailedInfoPage.xaml.cs

// COLLECTION PAGE
public sealed partial class CollectionPage : Page
{
    CustomDataObject _storeditem;

    public CollectionPage()
    {
        this.InitializeComponent();

        // Ensure that the MainPage is only created once, and cached during navigation.
        this.NavigationCacheMode = NavigationCacheMode.Enabled;

        collection.ItemsSource = AppUIBasics.ControlPages.CustomDataObject.GetDataObjects();
    }

    private async void collection_Loaded(object sender, RoutedEventArgs e)
    {
        if (_storeditem != null)
        {
            // If the connected item appears outside the viewport, scroll it into view.
            collection.ScrollIntoView(_storeditem, ScrollIntoViewAlignment.Default);
            collection.UpdateLayout();

            // Play the second connected animation. 
            ConnectedAnimation animation = ConnectedAnimationService.GetForCurrentView().GetAnimation("BackConnectedAnimation");
            if (animation != null)
            {
                // Setup the "back" configuration if the API is present. 
                if (ApiInformation.IsApiContractPresent("Windows.Foundation.UniversalApiContract", 7))
                {
                    animation.Configuration = new DirectConnectedAnimationConfiguration();
                }

                await collection.TryStartConnectedAnimationAsync(animation, _storeditem, "connectedElement");
            }

            // Set focus on the list
            collection.Focus(FocusState.Programmatic);
        }
    }

    private void collection_ItemClick(object sender, ItemClickEventArgs e)
    {
        // Get the collection item corresponding to the clicked item.
        if (collection.ContainerFromItem(e.ClickedItem) is ListViewItem container)
        {
            // Stash the clicked item for use later. We'll need it when we connect back from the detailpage.
            _storeditem = container.Content as CustomDataObject;

            // Prepare the connected animation.
            // Notice that the stored item is passed in, as well as the name of the connected element. 
            // The animation will actually start on the Detailed info page.
            var animation = collection.PrepareConnectedAnimation("ForwardConnectedAnimation", _storeditem, "connectedElement");

        }

        // Navigate to the DetailedInfoPage.
        // Note that we suppress the default animation. 
        Frame.Navigate(typeof(DetailedInfoPage), _storeditem, new SuppressNavigationTransitionInfo());
    }
}

// DETAILED PAGE
public sealed partial class DetailedInfoPage : Page
{
    public CustomDataObject DetailedObject { get; set; }
    public DetailedInfoPage()
    {
        this.InitializeComponent();
        GoBackButton.Loaded += GoBackButton_Loaded;
    }

    private void GoBackButton_Loaded(object sender, RoutedEventArgs e)
    {
        // When we land in page, put focus on the back button
        GoBackButton.Focus(FocusState.Programmatic);
    }

    protected override void OnNavigatedTo(NavigationEventArgs e)
    {
        base.OnNavigatedTo(e);

        // Store the item to be used in binding to UI
        DetailedObject = e.Parameter as CustomDataObject;

        ConnectedAnimation imageAnimation = ConnectedAnimationService.GetForCurrentView().GetAnimation("ForwardConnectedAnimation");
        if (imageAnimation != null)
        {
            // Connected animation + coordinated animation
            imageAnimation.TryStart(detailedImage, new UIElement[] { coordinatedPanel });

        }
    }

    // Create connected animation back to collection page.
    protected override void OnNavigatingFrom(NavigatingCancelEventArgs e)
    {
        base.OnNavigatingFrom(e);

        ConnectedAnimationService.GetForCurrentView().PrepareToAnimate("BackConnectedAnimation", detailedImage);
    }

    private void BackButton_Click(object sender, RoutedEventArgs e)
    {
        Frame.GoBack();
    }
}