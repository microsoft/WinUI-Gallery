//Teleportation Animation
private void ScrollView_ScrollAnimationStarting(ScrollView sender, ScrollingScrollAnimationStartingEventArgs e)
{
    // Cast the animation from the event arguments to a Vector3KeyFrameAnimation.
    Vector3KeyFrameAnimation stockKeyFrameAnimation = e.Animation as Vector3KeyFrameAnimation;

    // Check if the animation is of the correct type.
    if (stockKeyFrameAnimation != null)
    {
        // Calculate the target vertical offset for the scroll animation.
        double targetVerticalOffset = GetTargetVerticalOffset();
        float targetVerticalPosition = (float)targetVerticalOffset;

        // Create a new Vector3KeyFrameAnimation for custom animation.
        Vector3KeyFrameAnimation customKeyFrameAnimation = stockKeyFrameAnimation.Compositor.CreateVector3KeyFrameAnimation();

        // Calculate the difference between the current and target vertical positions.
        float deltaVerticalPosition = (float)(targetVerticalOffset - scrollView3.VerticalOffset);

        // Define easing functions for smooth transitions.
        // Start easing function with cubic Bezier curve for a quick start.
        CubicBezierEasingFunction cubicBezierStart = stockKeyFrameAnimation.Compositor.CreateCubicBezierEasingFunction(
            new Vector2(1.0f, 0.0f), // Control point 1
            new Vector2(1.0f, 0.0f)); // Control point 2

        // Define step easing function for a sudden change in animation.
        StepEasingFunction step = stockKeyFrameAnimation.Compositor.CreateStepEasingFunction(1);

        // End easing function with cubic Bezier curve for a smooth end.
        CubicBezierEasingFunction cubicBezierEnd = stockKeyFrameAnimation.Compositor.CreateCubicBezierEasingFunction(
            new Vector2(0.0f, 1.0f), // Control point 1
            new Vector2(0.0f, 1.0f)); // Control point 2

        // Insert keyframes into the custom animation.
        // First keyframe near the midpoint of the animation with a quick dip.
        customKeyFrameAnimation.InsertKeyFrame(
            0.499999f, // Time progress for the keyframe (almost halfway)
            new Vector3((float)scrollView3.HorizontalOffset, targetVerticalPosition - 0.9f * deltaVerticalPosition, 0.0f),
            cubicBezierStart); // Easing function for start

        // Second keyframe exactly at halfway with a sudden step change.
        customKeyFrameAnimation.InsertKeyFrame(
            0.5f, // Time progress for the keyframe (exactly halfway)
            new Vector3((float)scrollView3.HorizontalOffset, targetVerticalPosition - 0.1f * deltaVerticalPosition, 0.0f),
            step); // Easing function for sudden change

        // Final keyframe at the end of the animation.
        customKeyFrameAnimation.InsertKeyFrame(
            1.0f, // Time progress for the keyframe (end)
            new Vector3((float)scrollView3.HorizontalOffset, targetVerticalPosition, 0.0f),
            cubicBezierEnd); // Easing function for end

        // Set the duration of the custom animation.
        customKeyFrameAnimation.Duration = TimeSpan.FromMilliseconds(nbAnimationDuration.Value);

        // Replace the default animation with the custom animation.
        e.Animation = customKeyFrameAnimation;
    }
}

// This function is triggered when the button is clicked to scroll with animation.
private void BtnScrollWithAnimation_Click(object sender, RoutedEventArgs e)
{
    // Check if the ScrollView control is initialized.
    if (scrollView3 != null)
    {
        // Initiate a scroll to the target vertical offset with animation enabled.
        scrollView3.ScrollTo(scrollView3.HorizontalOffset, GetTargetVerticalOffset(), new ScrollingScrollOptions(ScrollingAnimationMode.Enabled, ScrollingSnapPointsMode.Ignore));
    }
}

// This function calculates the target vertical offset based on the current vertical offset of the ScrollView.
private double GetTargetVerticalOffset()
{
    // Determine if the current vertical offset is greater than half of the scrollable height.
    if (scrollView3.VerticalOffset > scrollView3.ScrollableHeight / 2.0)
    {
        // If yes, return a lower target vertical offset.
        return scrollView3.ScrollableHeight / 5.0;
    }
    else
    {
        // If no, return a higher target vertical offset.
        return 4.0 * scrollView3.ScrollableHeight / 5.0;
    }
}